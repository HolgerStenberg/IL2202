
IL2203-MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d54  08002d54  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000001c  08002d78  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002d78  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096cd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f0  00000000  00000000  00029711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cf2  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b4c  00000000  00000000  00045a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c792  00000000  00000000  0004f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a4  00000000  00000000  000ebdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d04 	.word	0x08002d04

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002d04 	.word	0x08002d04

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa60 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f82a 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8d8 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f8b8 	bl	80003a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f886 	bl	8000340 <MX_USART2_UART_Init>
  while (1)
  {



	  HAL_UART_Transmit(&huart2, myTxData, 16, 10);
 8000234:	490f      	ldr	r1, [pc, #60]	; (8000274 <main+0x58>)
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x5c>)
 8000238:	230a      	movs	r3, #10
 800023a:	2210      	movs	r2, #16
 800023c:	f001 fd44 	bl	8001cc8 <HAL_UART_Transmit>


	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fecb 	bl	8000fe4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800024e:	23fa      	movs	r3, #250	; 0xfa
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f000 faaa 	bl	80007ac <HAL_Delay>

	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET);
 8000258:	2390      	movs	r3, #144	; 0x90
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2200      	movs	r2, #0
 800025e:	2120      	movs	r1, #32
 8000260:	0018      	movs	r0, r3
 8000262:	f000 febf 	bl	8000fe4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fa9e 	bl	80007ac <HAL_Delay>
	  HAL_UART_Transmit(&huart2, myTxData, 16, 10);
 8000270:	e7e0      	b.n	8000234 <main+0x18>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000000 	.word	0x20000000
 8000278:	20000038 	.word	0x20000038

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b099      	sub	sp, #100	; 0x64
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	242c      	movs	r4, #44	; 0x2c
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fd31 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	231c      	movs	r3, #28
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fd29 	bl	8002cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	231c      	movs	r3, #28
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fd22 	bl	8002cf4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0212      	lsls	r2, r2, #8
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	22a0      	movs	r2, #160	; 0xa0
 80002d6:	0392      	lsls	r2, r2, #14
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2201      	movs	r2, #1
 80002de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fe9c 	bl	8001020 <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002ec:	f000 f8e0 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	211c      	movs	r1, #28
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fa0c 	bl	800172c <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000318:	f000 f8ca 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800031c:	003b      	movs	r3, r7
 800031e:	2202      	movs	r2, #2
 8000320:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000328:	003b      	movs	r3, r7
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fb78 	bl	8001a20 <HAL_RCCEx_PeriphCLKConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000334:	f000 f8bc 	bl	80004b0 <Error_Handler>
  }
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b019      	add	sp, #100	; 0x64
 800033e:	bd90      	pop	{r4, r7, pc}

08000340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000346:	4a15      	ldr	r2, [pc, #84]	; (800039c <MX_USART2_UART_Init+0x5c>)
 8000348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034a:	4b13      	ldr	r3, [pc, #76]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800034c:	22e1      	movs	r2, #225	; 0xe1
 800034e:	0252      	lsls	r2, r2, #9
 8000350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <MX_USART2_UART_Init+0x58>)
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fc4b 	bl	8001c20 <HAL_UART_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800038e:	f000 f88f 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000038 	.word	0x20000038
 800039c:	40004400 	.word	0x40004400

080003a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_DMA_Init+0x38>)
 80003a8:	695a      	ldr	r2, [r3, #20]
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_DMA_Init+0x38>)
 80003ac:	2101      	movs	r1, #1
 80003ae:	430a      	orrs	r2, r1
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_DMA_Init+0x38>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	2201      	movs	r2, #1
 80003b8:	4013      	ands	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2009      	movs	r0, #9
 80003c4:	f000 fac2 	bl	800094c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 80003c8:	2009      	movs	r0, #9
 80003ca:	f000 fad4 	bl	8000976 <HAL_NVIC_EnableIRQ>

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b089      	sub	sp, #36	; 0x24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	240c      	movs	r4, #12
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	0018      	movs	r0, r3
 80003e8:	2314      	movs	r3, #20
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 fc81 	bl	8002cf4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <MX_GPIO_Init+0xcc>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <MX_GPIO_Init+0xcc>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0309      	lsls	r1, r1, #12
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0xcc>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	031b      	lsls	r3, r3, #12
 8000408:	4013      	ands	r3, r2
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0xcc>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <MX_GPIO_Init+0xcc>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	03c9      	lsls	r1, r1, #15
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <MX_GPIO_Init+0xcc>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	03db      	lsls	r3, r3, #15
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_GPIO_Init+0xcc>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_GPIO_Init+0xcc>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_GPIO_Init+0xcc>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000446:	2390      	movs	r3, #144	; 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fdc8 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0192      	lsls	r2, r2, #6
 800045a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2284      	movs	r2, #132	; 0x84
 8000460:	0392      	lsls	r2, r2, #14
 8000462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046a:	193b      	adds	r3, r7, r4
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <MX_GPIO_Init+0xd0>)
 800046e:	0019      	movs	r1, r3
 8000470:	0010      	movs	r0, r2
 8000472:	f000 fc3f 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000476:	0021      	movs	r1, r4
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2220      	movs	r2, #32
 800047c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2201      	movs	r2, #1
 8000482:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000490:	187a      	adds	r2, r7, r1
 8000492:	2390      	movs	r3, #144	; 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fc2b 	bl	8000cf4 <HAL_GPIO_Init>

}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b009      	add	sp, #36	; 0x24
 80004a4:	bd90      	pop	{r4, r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000
 80004ac:	48000800 	.word	0x48000800

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0549      	lsls	r1, r1, #21
 80004e4:	430a      	orrs	r2, r1
 80004e6:	61da      	str	r2, [r3, #28]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_MspInit+0x44>)
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	055b      	lsls	r3, r3, #21
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b08b      	sub	sp, #44	; 0x2c
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2414      	movs	r4, #20
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 fbec 	bl	8002cf4 <memset>
  if(huart->Instance==USART2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a3b      	ldr	r2, [pc, #236]	; (8000610 <HAL_UART_MspInit+0x10c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d170      	bne.n	8000608 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000526:	4b3b      	ldr	r3, [pc, #236]	; (8000614 <HAL_UART_MspInit+0x110>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	4b3a      	ldr	r3, [pc, #232]	; (8000614 <HAL_UART_MspInit+0x110>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0289      	lsls	r1, r1, #10
 8000530:	430a      	orrs	r2, r1
 8000532:	61da      	str	r2, [r3, #28]
 8000534:	4b37      	ldr	r3, [pc, #220]	; (8000614 <HAL_UART_MspInit+0x110>)
 8000536:	69da      	ldr	r2, [r3, #28]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	029b      	lsls	r3, r3, #10
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <HAL_UART_MspInit+0x110>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <HAL_UART_MspInit+0x110>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <HAL_UART_MspInit+0x110>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	220c      	movs	r2, #12
 8000564:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2202      	movs	r2, #2
 800056a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	187a      	adds	r2, r7, r1
 8000580:	2390      	movs	r3, #144	; 0x90
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fbb4 	bl	8000cf4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <HAL_UART_MspInit+0x114>)
 800058e:	4a23      	ldr	r2, [pc, #140]	; (800061c <HAL_UART_MspInit+0x118>)
 8000590:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <HAL_UART_MspInit+0x114>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <HAL_UART_MspInit+0x114>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005b2:	2220      	movs	r2, #32
 80005b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f9f6 	bl	80009b0 <HAL_DMA_Init>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80005c8:	f7ff ff72 	bl	80004b0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_UART_MspInit+0x11c>)
 80005ce:	23a8      	movs	r3, #168	; 0xa8
 80005d0:	58d3      	ldr	r3, [r2, r3]
 80005d2:	4913      	ldr	r1, [pc, #76]	; (8000620 <HAL_UART_MspInit+0x11c>)
 80005d4:	220f      	movs	r2, #15
 80005d6:	4393      	bics	r3, r2
 80005d8:	22a8      	movs	r2, #168	; 0xa8
 80005da:	508b      	str	r3, [r1, r2]
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <HAL_UART_MspInit+0x11c>)
 80005de:	23a8      	movs	r3, #168	; 0xa8
 80005e0:	58d3      	ldr	r3, [r2, r3]
 80005e2:	490f      	ldr	r1, [pc, #60]	; (8000620 <HAL_UART_MspInit+0x11c>)
 80005e4:	2209      	movs	r2, #9
 80005e6:	4313      	orrs	r3, r2
 80005e8:	22a8      	movs	r2, #168	; 0xa8
 80005ea:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005f0:	671a      	str	r2, [r3, #112]	; 0x70
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_UART_MspInit+0x114>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	201c      	movs	r0, #28
 80005fe:	f000 f9a5 	bl	800094c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000602:	201c      	movs	r0, #28
 8000604:	f000 f9b7 	bl	8000976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b00b      	add	sp, #44	; 0x2c
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40004400 	.word	0x40004400
 8000614:	40021000 	.word	0x40021000
 8000618:	200000bc 	.word	0x200000bc
 800061c:	40020008 	.word	0x40020008
 8000620:	40020000 	.word	0x40020000

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000648:	f000 f894 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <DMA1_Ch1_IRQHandler+0x14>)
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fa6d 	bl	8000b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	200000bc 	.word	0x200000bc

0800066c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <USART2_IRQHandler+0x14>)
 8000672:	0018      	movs	r0, r3
 8000674:	f001 fbd2 	bl	8001e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000038 	.word	0x20000038

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0b      	ldr	r4, [pc, #44]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ba:	f7ff ffe3 	bl	8000684 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006be:	f002 faf5 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fdab 	bl	800021c <main>

080006c6 <LoopForever>:

LoopForever:
    b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80006d4:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 80006d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80006dc:	20000104 	.word	0x20000104

080006e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_COMP_IRQHandler>
	...

080006e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_Init+0x24>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_Init+0x24>)
 80006ee:	2110      	movs	r1, #16
 80006f0:	430a      	orrs	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f809 	bl	800070c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006fa:	f7ff fedf 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40022000 	.word	0x40022000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_InitTick+0x5c>)
 8000716:	681c      	ldr	r4, [r3, #0]
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	0019      	movs	r1, r3
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	0098      	lsls	r0, r3, #2
 8000722:	f7ff fcef 	bl	8000104 <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	0019      	movs	r1, r3
 800072a:	0020      	movs	r0, r4
 800072c:	f7ff fcea 	bl	8000104 <__udivsi3>
 8000730:	0003      	movs	r3, r0
 8000732:	0018      	movs	r0, r3
 8000734:	f000 f92f 	bl	8000996 <HAL_SYSTICK_Config>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	e00f      	b.n	8000760 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d80b      	bhi.n	800075e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	2301      	movs	r3, #1
 800074a:	425b      	negs	r3, r3
 800074c:	2200      	movs	r2, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f8fc 	bl	800094c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_InitTick+0x64>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b003      	add	sp, #12
 8000766:	bd90      	pop	{r4, r7, pc}
 8000768:	20000010 	.word	0x20000010
 800076c:	20000018 	.word	0x20000018
 8000770:	20000014 	.word	0x20000014

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	18d2      	adds	r2, r2, r3
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	601a      	str	r2, [r3, #0]
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000018 	.word	0x20000018
 8000794:	20000100 	.word	0x20000100

08000798 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000100 	.word	0x20000100

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff fff0 	bl	8000798 <HAL_GetTick>
 80007b8:	0003      	movs	r3, r0
 80007ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_Delay+0x44>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	001a      	movs	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	189b      	adds	r3, r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	f7ff ffe0 	bl	8000798 <HAL_GetTick>
 80007d8:	0002      	movs	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000018 	.word	0x20000018

080007f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b7f      	cmp	r3, #127	; 0x7f
 8000806:	d809      	bhi.n	800081c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	231f      	movs	r3, #31
 8000810:	401a      	ands	r2, r3
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_EnableIRQ+0x30>)
 8000814:	2101      	movs	r1, #1
 8000816:	4091      	lsls	r1, r2
 8000818:	000a      	movs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
  }
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}
 8000824:	e000e100 	.word	0xe000e100

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b7f      	cmp	r3, #127	; 0x7f
 800083c:	d828      	bhi.n	8000890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <__NVIC_SetPriority+0xd4>)
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	33c0      	adds	r3, #192	; 0xc0
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	589b      	ldr	r3, [r3, r2]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	; 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <__NVIC_SetPriority+0xd4>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25b      	sxtb	r3, r3
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	430a      	orrs	r2, r1
 8000888:	33c0      	adds	r3, #192	; 0xc0
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800088e:	e031      	b.n	80008f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0019      	movs	r1, r3
 8000898:	230f      	movs	r3, #15
 800089a:	400b      	ands	r3, r1
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	3306      	adds	r3, #6
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <__NVIC_SetPriority+0xd8>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	001c      	movs	r4, r3
 80008e0:	230f      	movs	r3, #15
 80008e2:	4023      	ands	r3, r4
 80008e4:	3b08      	subs	r3, #8
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	430a      	orrs	r2, r1
 80008ea:	3306      	adds	r3, #6
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	18c3      	adds	r3, r0, r3
 80008f0:	3304      	adds	r3, #4
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	1e5a      	subs	r2, r3, #1
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	045b      	lsls	r3, r3, #17
 8000914:	429a      	cmp	r2, r3
 8000916:	d301      	bcc.n	800091c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000918:	2301      	movs	r3, #1
 800091a:	e010      	b.n	800093e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <SysTick_Config+0x44>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	3a01      	subs	r2, #1
 8000922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	2103      	movs	r1, #3
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff ff7c 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x44>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	210f      	movs	r1, #15
 8000958:	187b      	adds	r3, r7, r1
 800095a:	1c02      	adds	r2, r0, #0
 800095c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	0002      	movs	r2, r0
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff33 	bl	80007f4 <__NVIC_EnableIRQ>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ffaf 	bl	8000904 <SysTick_Config>
 80009a6:	0003      	movs	r3, r0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e036      	b.n	8000a34 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2221      	movs	r2, #33	; 0x21
 80009ca:	2102      	movs	r1, #2
 80009cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <HAL_DMA_Init+0x8c>)
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69db      	ldr	r3, [r3, #28]
 8000a04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f932 	bl	8000c80 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2221      	movs	r2, #33	; 0x21
 8000a26:	2101      	movs	r1, #1
 8000a28:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}  
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b004      	add	sp, #16
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	ffffc00f 	.word	0xffffc00f

08000a40 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2221      	movs	r2, #33	; 0x21
 8000a4c:	5c9b      	ldrb	r3, [r3, r2]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d008      	beq.n	8000a66 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2204      	movs	r2, #4
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e020      	b.n	8000aa8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	210e      	movs	r1, #14
 8000a72:	438a      	bics	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2101      	movs	r1, #1
 8000a82:	438a      	bics	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2221      	movs	r2, #33	; 0x21
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab8:	210f      	movs	r1, #15
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2221      	movs	r2, #33	; 0x21
 8000ac4:	5c9b      	ldrb	r3, [r3, r2]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d006      	beq.n	8000ada <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2204      	movs	r2, #4
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e028      	b.n	8000b2c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	210e      	movs	r1, #14
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	438a      	bics	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b02:	2101      	movs	r1, #1
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2221      	movs	r2, #33	; 0x21
 8000b0e:	2101      	movs	r1, #1
 8000b10:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d004      	beq.n	8000b2c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	0010      	movs	r0, r2
 8000b2a:	4798      	blx	r3
    } 
  }
  return status;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	2204      	movs	r2, #4
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d024      	beq.n	8000bac <HAL_DMA_IRQHandler+0x72>
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2204      	movs	r2, #4
 8000b66:	4013      	ands	r3, r2
 8000b68:	d020      	beq.n	8000bac <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2220      	movs	r2, #32
 8000b72:	4013      	ands	r3, r2
 8000b74:	d107      	bne.n	8000b86 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2104      	movs	r1, #4
 8000b82:	438a      	bics	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <HAL_DMA_IRQHandler+0x66>
 8000b9e:	e06a      	b.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000baa:	e064      	b.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d02b      	beq.n	8000c14 <HAL_DMA_IRQHandler+0xda>
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d027      	beq.n	8000c14 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d10b      	bne.n	8000be8 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	210a      	movs	r1, #10
 8000bdc:	438a      	bics	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2221      	movs	r2, #33	; 0x21
 8000be4:	2101      	movs	r1, #1
 8000be6:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2220      	movs	r2, #32
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d036      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	0010      	movs	r0, r2
 8000c10:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c12:	e030      	b.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	2208      	movs	r2, #8
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4013      	ands	r3, r2
 8000c22:	d028      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2208      	movs	r2, #8
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d024      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	210e      	movs	r1, #14
 8000c38:	438a      	bics	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	2101      	movs	r1, #1
 8000c46:	4091      	lsls	r1, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2221      	movs	r2, #33	; 0x21
 8000c56:	2101      	movs	r1, #1
 8000c58:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	0010      	movs	r0, r2
 8000c72:	4798      	blx	r3
    }
   }
}  
 8000c74:	e7ff      	b.n	8000c76 <HAL_DMA_IRQHandler+0x13c>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <DMA_CalcBaseAndBitshift+0x60>)
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d810      	bhi.n	8000cb6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	2114      	movs	r1, #20
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fa2f 	bl	8000104 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	009a      	lsls	r2, r3, #2
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000cb4:	e00f      	b.n	8000cd6 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <DMA_CalcBaseAndBitshift+0x6c>)
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	2114      	movs	r1, #20
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fa1e 	bl	8000104 <__udivsi3>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	009a      	lsls	r2, r3, #2
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <DMA_CalcBaseAndBitshift+0x70>)
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40020407 	.word	0x40020407
 8000ce4:	bffdfff8 	.word	0xbffdfff8
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	bffdfbf8 	.word	0xbffdfbf8
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e155      	b.n	8000fb0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d100      	bne.n	8000d1c <HAL_GPIO_Init+0x28>
 8000d1a:	e146      	b.n	8000faa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	409a      	lsls	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	43da      	mvns	r2, r3
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	2201      	movs	r2, #1
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d017      	beq.n	8000dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	58d3      	ldr	r3, [r2, r3]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2207      	movs	r2, #7
 8000df0:	4013      	ands	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2107      	movs	r1, #7
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	6939      	ldr	r1, [r7, #16]
 8000e24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	401a      	ands	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	23c0      	movs	r3, #192	; 0xc0
 8000e60:	029b      	lsls	r3, r3, #10
 8000e62:	4013      	ands	r3, r2
 8000e64:	d100      	bne.n	8000e68 <HAL_GPIO_Init+0x174>
 8000e66:	e0a0      	b.n	8000faa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <HAL_GPIO_Init+0x2d4>)
 8000e6a:	699a      	ldr	r2, [r3, #24]
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <HAL_GPIO_Init+0x2d4>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	4b54      	ldr	r3, [pc, #336]	; (8000fc8 <HAL_GPIO_Init+0x2d4>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e80:	4a52      	ldr	r2, [pc, #328]	; (8000fcc <HAL_GPIO_Init+0x2d8>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	589b      	ldr	r3, [r3, r2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2203      	movs	r2, #3
 8000e92:	4013      	ands	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	0013      	movs	r3, r2
 8000e9c:	43da      	mvns	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	2390      	movs	r3, #144	; 0x90
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x1ee>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <HAL_GPIO_Init+0x2dc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1ea>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <HAL_GPIO_Init+0x2e0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1e6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1e2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a44      	ldr	r2, [pc, #272]	; (8000fdc <HAL_GPIO_Init+0x2e8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1de>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x1f0>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	2103      	movs	r1, #3
 8000ee8:	400a      	ands	r2, r1
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <HAL_GPIO_Init+0x2d8>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43da      	mvns	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	035b      	lsls	r3, r3, #13
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	039b      	lsls	r3, r3, #14
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_GPIO_Init+0x2ec>)
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	1e13      	subs	r3, r2, #0
 8000fba:	d000      	beq.n	8000fbe <HAL_GPIO_Init+0x2ca>
 8000fbc:	e6a2      	b.n	8000d04 <HAL_GPIO_Init+0x10>
  } 
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	0008      	movs	r0, r1
 8000fee:	0011      	movs	r1, r2
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	1c02      	adds	r2, r0, #0
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	1c7b      	adds	r3, r7, #1
 8000ff8:	1c0a      	adds	r2, r1, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	1c7b      	adds	r3, r7, #1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001004:	1cbb      	adds	r3, r7, #2
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800100c:	e003      	b.n	8001016 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100e:	1cbb      	adds	r3, r7, #2
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	f000 fb76 	bl	8001720 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	4013      	ands	r3, r2
 800103c:	d100      	bne.n	8001040 <HAL_RCC_OscConfig+0x20>
 800103e:	e08e      	b.n	800115e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001040:	4bc5      	ldr	r3, [pc, #788]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	220c      	movs	r2, #12
 8001046:	4013      	ands	r3, r2
 8001048:	2b04      	cmp	r3, #4
 800104a:	d00e      	beq.n	800106a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800104c:	4bc2      	ldr	r3, [pc, #776]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	220c      	movs	r2, #12
 8001052:	4013      	ands	r3, r2
 8001054:	2b08      	cmp	r3, #8
 8001056:	d117      	bne.n	8001088 <HAL_RCC_OscConfig+0x68>
 8001058:	4bbf      	ldr	r3, [pc, #764]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	23c0      	movs	r3, #192	; 0xc0
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	401a      	ands	r2, r3
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	429a      	cmp	r2, r3
 8001068:	d10e      	bne.n	8001088 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106a:	4bbb      	ldr	r3, [pc, #748]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	029b      	lsls	r3, r3, #10
 8001072:	4013      	ands	r3, r2
 8001074:	d100      	bne.n	8001078 <HAL_RCC_OscConfig+0x58>
 8001076:	e071      	b.n	800115c <HAL_RCC_OscConfig+0x13c>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d000      	beq.n	8001082 <HAL_RCC_OscConfig+0x62>
 8001080:	e06c      	b.n	800115c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	f000 fb4c 	bl	8001720 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_OscConfig+0x80>
 8001090:	4bb1      	ldr	r3, [pc, #708]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4bb0      	ldr	r3, [pc, #704]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0249      	lsls	r1, r1, #9
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e02f      	b.n	8001100 <HAL_RCC_OscConfig+0xe0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0xa2>
 80010a8:	4bab      	ldr	r3, [pc, #684]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4baa      	ldr	r3, [pc, #680]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010ae:	49ab      	ldr	r1, [pc, #684]	; (800135c <HAL_RCC_OscConfig+0x33c>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	4ba8      	ldr	r3, [pc, #672]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4ba7      	ldr	r3, [pc, #668]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010ba:	49a9      	ldr	r1, [pc, #676]	; (8001360 <HAL_RCC_OscConfig+0x340>)
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e01e      	b.n	8001100 <HAL_RCC_OscConfig+0xe0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d10e      	bne.n	80010e8 <HAL_RCC_OscConfig+0xc8>
 80010ca:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4ba2      	ldr	r3, [pc, #648]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	02c9      	lsls	r1, r1, #11
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4b9f      	ldr	r3, [pc, #636]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b9e      	ldr	r3, [pc, #632]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0249      	lsls	r1, r1, #9
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0xe0>
 80010e8:	4b9b      	ldr	r3, [pc, #620]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b9a      	ldr	r3, [pc, #616]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010ee:	499b      	ldr	r1, [pc, #620]	; (800135c <HAL_RCC_OscConfig+0x33c>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4b98      	ldr	r3, [pc, #608]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b97      	ldr	r3, [pc, #604]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80010fa:	4999      	ldr	r1, [pc, #612]	; (8001360 <HAL_RCC_OscConfig+0x340>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d014      	beq.n	8001132 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fb46 	bl	8000798 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff fb41 	bl	8000798 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e2fd      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001124:	4b8c      	ldr	r3, [pc, #560]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0xf2>
 8001130:	e015      	b.n	800115e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fb31 	bl	8000798 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fb2c 	bl	8000798 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e2e8      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b82      	ldr	r3, [pc, #520]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x11c>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	d100      	bne.n	800116a <HAL_RCC_OscConfig+0x14a>
 8001168:	e06c      	b.n	8001244 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116a:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	220c      	movs	r2, #12
 8001170:	4013      	ands	r3, r2
 8001172:	d00e      	beq.n	8001192 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001174:	4b78      	ldr	r3, [pc, #480]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	220c      	movs	r2, #12
 800117a:	4013      	ands	r3, r2
 800117c:	2b08      	cmp	r3, #8
 800117e:	d11f      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1a0>
 8001180:	4b75      	ldr	r3, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	23c0      	movs	r3, #192	; 0xc0
 8001186:	025b      	lsls	r3, r3, #9
 8001188:	401a      	ands	r2, r3
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	429a      	cmp	r2, r3
 8001190:	d116      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	4b71      	ldr	r3, [pc, #452]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2202      	movs	r2, #2
 8001198:	4013      	ands	r3, r2
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_OscConfig+0x188>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e2bb      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	22f8      	movs	r2, #248	; 0xf8
 80011ae:	4393      	bics	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	00da      	lsls	r2, r3, #3
 80011b8:	4b67      	ldr	r3, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	e041      	b.n	8001244 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d024      	beq.n	8001212 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c8:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b62      	ldr	r3, [pc, #392]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fae0 	bl	8000798 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fadb 	bl	8000798 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e297      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d0f1      	beq.n	80011de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	22f8      	movs	r2, #248	; 0xf8
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	00da      	lsls	r2, r3, #3
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e018      	b.n	8001244 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001218:	2101      	movs	r1, #1
 800121a:	438a      	bics	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fabb 	bl	8000798 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fab6 	bl	8000798 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e272      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d1f1      	bne.n	8001228 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2208      	movs	r2, #8
 800124a:	4013      	ands	r3, r2
 800124c:	d036      	beq.n	80012bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	4b40      	ldr	r3, [pc, #256]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fa99 	bl	8000798 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fa94 	bl	8000798 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e250      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d0f1      	beq.n	800126c <HAL_RCC_OscConfig+0x24c>
 8001288:	e018      	b.n	80012bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800128c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 8001290:	2101      	movs	r1, #1
 8001292:	438a      	bics	r2, r1
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fa7f 	bl	8000798 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fa7a 	bl	8000798 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e236      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f1      	bne.n	80012a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2204      	movs	r2, #4
 80012c2:	4013      	ands	r3, r2
 80012c4:	d100      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2a8>
 80012c6:	e0b5      	b.n	8001434 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c8:	201f      	movs	r0, #31
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	055b      	lsls	r3, r3, #21
 80012d8:	4013      	ands	r3, r2
 80012da:	d110      	bne.n	80012fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80012de:	69da      	ldr	r2, [r3, #28]
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	0549      	lsls	r1, r1, #21
 80012e6:	430a      	orrs	r2, r1
 80012e8:	61da      	str	r2, [r3, #28]
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	055b      	lsls	r3, r3, #21
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012f8:	183b      	adds	r3, r7, r0
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_RCC_OscConfig+0x344>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4013      	ands	r3, r2
 8001308:	d11a      	bne.n	8001340 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_RCC_OscConfig+0x344>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_RCC_OscConfig+0x344>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0049      	lsls	r1, r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001318:	f7ff fa3e 	bl	8000798 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fa39 	bl	8000798 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1f5      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x344>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4013      	ands	r3, r2
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10f      	bne.n	8001368 <HAL_RCC_OscConfig+0x348>
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_RCC_OscConfig+0x338>)
 800134e:	2101      	movs	r1, #1
 8001350:	430a      	orrs	r2, r1
 8001352:	621a      	str	r2, [r3, #32]
 8001354:	e036      	b.n	80013c4 <HAL_RCC_OscConfig+0x3a4>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	fffeffff 	.word	0xfffeffff
 8001360:	fffbffff 	.word	0xfffbffff
 8001364:	40007000 	.word	0x40007000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x36a>
 8001370:	4bca      	ldr	r3, [pc, #808]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	4bc9      	ldr	r3, [pc, #804]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001376:	2101      	movs	r1, #1
 8001378:	438a      	bics	r2, r1
 800137a:	621a      	str	r2, [r3, #32]
 800137c:	4bc7      	ldr	r3, [pc, #796]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800137e:	6a1a      	ldr	r2, [r3, #32]
 8001380:	4bc6      	ldr	r3, [pc, #792]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001382:	2104      	movs	r1, #4
 8001384:	438a      	bics	r2, r1
 8001386:	621a      	str	r2, [r3, #32]
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x3a4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x38c>
 8001392:	4bc2      	ldr	r3, [pc, #776]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4bc1      	ldr	r3, [pc, #772]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001398:	2104      	movs	r1, #4
 800139a:	430a      	orrs	r2, r1
 800139c:	621a      	str	r2, [r3, #32]
 800139e:	4bbf      	ldr	r3, [pc, #764]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	4bbe      	ldr	r3, [pc, #760]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013a4:	2101      	movs	r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	621a      	str	r2, [r3, #32]
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x3a4>
 80013ac:	4bbb      	ldr	r3, [pc, #748]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4bba      	ldr	r3, [pc, #744]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	438a      	bics	r2, r1
 80013b6:	621a      	str	r2, [r3, #32]
 80013b8:	4bb8      	ldr	r3, [pc, #736]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013ba:	6a1a      	ldr	r2, [r3, #32]
 80013bc:	4bb7      	ldr	r3, [pc, #732]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013be:	2104      	movs	r1, #4
 80013c0:	438a      	bics	r2, r1
 80013c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d014      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff f9e4 	bl	8000798 <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d4:	e009      	b.n	80013ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7ff f9df 	bl	8000798 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4aaf      	ldr	r2, [pc, #700]	; (80016a0 <HAL_RCC_OscConfig+0x680>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e19a      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	4bac      	ldr	r3, [pc, #688]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3b6>
 80013f4:	e013      	b.n	800141e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f9cf 	bl	8000798 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	e009      	b.n	8001414 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff f9ca 	bl	8000798 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4aa5      	ldr	r2, [pc, #660]	; (80016a0 <HAL_RCC_OscConfig+0x680>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e185      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	4ba1      	ldr	r3, [pc, #644]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800141e:	231f      	movs	r3, #31
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b9c      	ldr	r3, [pc, #624]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800142a:	69da      	ldr	r2, [r3, #28]
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800142e:	499d      	ldr	r1, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x684>)
 8001430:	400a      	ands	r2, r1
 8001432:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2210      	movs	r2, #16
 800143a:	4013      	ands	r3, r2
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d12a      	bne.n	800149c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001446:	4b95      	ldr	r3, [pc, #596]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144a:	4b94      	ldr	r3, [pc, #592]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800144c:	2104      	movs	r1, #4
 800144e:	430a      	orrs	r2, r1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001452:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001456:	4b91      	ldr	r3, [pc, #580]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001458:	2101      	movs	r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff f99b 	bl	8000798 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001468:	f7ff f996 	bl	8000798 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e152      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d0f1      	beq.n	8001468 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001484:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001488:	22f8      	movs	r2, #248	; 0xf8
 800148a:	4393      	bics	r3, r2
 800148c:	0019      	movs	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	00da      	lsls	r2, r3, #3
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001496:	430a      	orrs	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
 800149a:	e034      	b.n	8001506 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	3305      	adds	r3, #5
 80014a2:	d111      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014a4:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a8:	4b7c      	ldr	r3, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014aa:	2104      	movs	r1, #4
 80014ac:	438a      	bics	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014b0:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4393      	bics	r3, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	00da      	lsls	r2, r3, #3
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
 80014c6:	e01e      	b.n	8001506 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c8:	4b74      	ldr	r3, [pc, #464]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	4b73      	ldr	r3, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014ce:	2104      	movs	r1, #4
 80014d0:	430a      	orrs	r2, r1
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014d4:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014da:	2101      	movs	r1, #1
 80014dc:	438a      	bics	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff f95a 	bl	8000798 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014ea:	f7ff f955 	bl	8000798 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e111      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014fc:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d1f1      	bne.n	80014ea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2220      	movs	r2, #32
 800150c:	4013      	ands	r3, r2
 800150e:	d05c      	beq.n	80015ca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	220c      	movs	r2, #12
 8001516:	4013      	ands	r3, r2
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d00e      	beq.n	800153a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	220c      	movs	r2, #12
 8001522:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001524:	2b08      	cmp	r3, #8
 8001526:	d114      	bne.n	8001552 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001528:	4b5c      	ldr	r3, [pc, #368]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	025b      	lsls	r3, r3, #9
 8001530:	401a      	ands	r2, r3
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	429a      	cmp	r2, r3
 8001538:	d10b      	bne.n	8001552 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800153a:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800153c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	025b      	lsls	r3, r3, #9
 8001542:	4013      	ands	r3, r2
 8001544:	d040      	beq.n	80015c8 <HAL_RCC_OscConfig+0x5a8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d03c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0e6      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01b      	beq.n	8001592 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800155c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0249      	lsls	r1, r1, #9
 8001564:	430a      	orrs	r2, r1
 8001566:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f916 	bl	8000798 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001572:	f7ff f911 	bl	8000798 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0cd      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	4013      	ands	r3, r2
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x552>
 8001590:	e01b      	b.n	80015ca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001598:	4943      	ldr	r1, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x688>)
 800159a:	400a      	ands	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff f8fb 	bl	8000798 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015a8:	f7ff f8f6 	bl	8000798 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b2      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x588>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015c8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5b4>
 80015d2:	e0a4      	b.n	800171e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x5c2>
 80015e0:	e078      	b.n	80016d4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d14c      	bne.n	8001684 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 80015f0:	492e      	ldr	r1, [pc, #184]	; (80016ac <HAL_RCC_OscConfig+0x68c>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f8cf 	bl	8000798 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff f8ca 	bl	8000798 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e086      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	049b      	lsls	r3, r3, #18
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	220f      	movs	r2, #15
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800162e:	430a      	orrs	r2, r1
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_RCC_OscConfig+0x690>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	431a      	orrs	r2, r3
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	0449      	lsls	r1, r1, #17
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff f89d 	bl	8000798 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f898 	bl	8000798 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e054      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x644>
 8001682:	e04c      	b.n	800171e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_RCC_OscConfig+0x67c>)
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x68c>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f882 	bl	8000798 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x6a6>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	00001388 	.word	0x00001388
 80016a4:	efffffff 	.word	0xefffffff
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	feffffff 	.word	0xfeffffff
 80016b0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f870 	bl	8000798 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e02c      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_RCC_OscConfig+0x708>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	049b      	lsls	r3, r3, #18
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x694>
 80016d2:	e024      	b.n	800171e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e01f      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_RCC_OscConfig+0x708>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_RCC_OscConfig+0x708>)
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d10e      	bne.n	800171a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	220f      	movs	r2, #15
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d107      	bne.n	800171a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	23f0      	movs	r3, #240	; 0xf0
 800170e:	039b      	lsls	r3, r3, #14
 8001710:	401a      	ands	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b008      	add	sp, #32
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0bf      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d911      	bls.n	8001772 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	4393      	bics	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	4013      	ands	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0a6      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d015      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	d006      	beq.n	8001794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 800178c:	21e0      	movs	r1, #224	; 0xe0
 800178e:	00c9      	lsls	r1, r1, #3
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	22f0      	movs	r2, #240	; 0xf0
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80017a4:	430a      	orrs	r2, r1
 80017a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	d04c      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d120      	bne.n	8001808 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07a      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	049b      	lsls	r3, r3, #18
 80017da:	4013      	ands	r3, r2
 80017dc:	d114      	bne.n	8001808 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06e      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80017ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e062      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e05b      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7fe ffbc 	bl	8000798 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001824:	e009      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7fe ffb7 	bl	8000798 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x1a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e042      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	220c      	movs	r2, #12
 8001840:	401a      	ands	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d211      	bcs.n	800187e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_RCC_ClockConfig+0x19c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e020      	b.n	80018c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2204      	movs	r2, #4
 8001884:	4013      	ands	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_RCC_ClockConfig+0x1a8>)
 800188e:	4013      	ands	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800189c:	f000 f820 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80018a0:	0001      	movs	r1, r0
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x1a0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	220f      	movs	r2, #15
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1ac>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	000a      	movs	r2, r1
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1b0>)
 80018b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7fe ff27 	bl	800070c <HAL_InitTick>
  
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	00001388 	.word	0x00001388
 80018d4:	fffff8ff 	.word	0xfffff8ff
 80018d8:	08002d3c 	.word	0x08002d3c
 80018dc:	20000010 	.word	0x20000010

080018e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
 80018e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018e6:	2314      	movs	r3, #20
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_RCC_GetSysClockFreq+0xec>)
 80018ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ee:	c313      	stmia	r3!, {r0, r1, r4}
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018fa:	c313      	stmia	r3!, {r0, r1, r4}
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d047      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001924:	d849      	bhi.n	80019ba <HAL_RCC_GetSysClockFreq+0xda>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x50>
 800192a:	2b08      	cmp	r3, #8
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x56>
 800192e:	e044      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001934:	e044      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	220f      	movs	r2, #15
 800193c:	4013      	ands	r3, r2
 800193e:	2214      	movs	r2, #20
 8001940:	18ba      	adds	r2, r7, r2
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	220f      	movs	r2, #15
 800194c:	4013      	ands	r3, r2
 800194e:	1d3a      	adds	r2, r7, #4
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	401a      	ands	r2, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	429a      	cmp	r2, r3
 8001962:	d109      	bne.n	8001978 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001966:	481c      	ldr	r0, [pc, #112]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001968:	f7fe fbcc 	bl	8000104 <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	001a      	movs	r2, r3
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	4353      	muls	r3, r2
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e01a      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	401a      	ands	r2, r3
 8001980:	23c0      	movs	r3, #192	; 0xc0
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d109      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800198c:	f7fe fbba 	bl	8000104 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	001a      	movs	r2, r3
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	4353      	muls	r3, r2
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	e008      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800199c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a0:	f7fe fbb0 	bl	8000104 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	001a      	movs	r2, r3
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	4353      	muls	r3, r2
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_GetSysClockFreq+0xfc>)
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019b8:	e002      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b00f      	add	sp, #60	; 0x3c
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	08002d1c 	.word	0x08002d1c
 80019d0:	08002d2c 	.word	0x08002d2c
 80019d4:	40021000 	.word	0x40021000
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	02dc6c00 	.word	0x02dc6c00

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	20000010 	.word	0x20000010

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019f8:	f7ff fff2 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 80019fc:	0001      	movs	r1, r0
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	2207      	movs	r2, #7
 8001a06:	4013      	ands	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	40d9      	lsrs	r1, r3
 8001a0e:	000b      	movs	r3, r1
}    
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002d4c 	.word	0x08002d4c

08001a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a3c:	e08e      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a3e:	2017      	movs	r0, #23
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b6e      	ldr	r3, [pc, #440]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	055b      	lsls	r3, r3, #21
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d110      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0549      	lsls	r1, r1, #21
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	61da      	str	r2, [r3, #28]
 8001a60:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	055b      	lsls	r3, r3, #21
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d11a      	bne.n	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0049      	lsls	r1, r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fe83 	bl	8000798 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	e008      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a98:	f7fe fe7e 	bl	8000798 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0a6      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ab6:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d034      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d02c      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ad8:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0249      	lsls	r1, r1, #9
 8001aec:	430a      	orrs	r2, r1
 8001aee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af2:	6a1a      	ldr	r2, [r3, #32]
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af6:	4945      	ldr	r1, [pc, #276]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe fe45 	bl	8000798 <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	e009      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7fe fe40 	bl	8000798 <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e067      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b42:	430a      	orrs	r2, r1
 8001b44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b46:	2317      	movs	r3, #23
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b56:	492f      	ldr	r1, [pc, #188]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d009      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	02db      	lsls	r3, r3, #11
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4013      	ands	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	fffffcff 	.word	0xfffffcff
 8001c0c:	fffeffff 	.word	0xfffeffff
 8001c10:	00001388 	.word	0x00001388
 8001c14:	efffffff 	.word	0xefffffff
 8001c18:	fffcffff 	.word	0xfffcffff
 8001c1c:	fff3ffff 	.word	0xfff3ffff

08001c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e044      	b.n	8001cbc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2274      	movs	r2, #116	; 0x74
 8001c3e:	2100      	movs	r1, #0
 8001c40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7fe fc5d 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2224      	movs	r2, #36	; 0x24
 8001c4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	438a      	bics	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fbce 	bl	8002404 <UART_SetConfig>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e024      	b.n	8001cbc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 fda9 	bl	80027d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <HAL_UART_Init+0xa4>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	212a      	movs	r1, #42	; 0x2a
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fe41 	bl	800293c <UART_CheckIdleState>
 8001cba:	0003      	movs	r3, r0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffffb7ff 	.word	0xffffb7ff

08001cc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d000      	beq.n	8001ce2 <HAL_UART_Transmit+0x1a>
 8001ce0:	e096      	b.n	8001e10 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_UART_Transmit+0x28>
 8001ce8:	1dbb      	adds	r3, r7, #6
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e08e      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	015b      	lsls	r3, r3, #5
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d109      	bne.n	8001d14 <HAL_UART_Transmit+0x4c>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e07e      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2274      	movs	r2, #116	; 0x74
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_UART_Transmit+0x5a>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e077      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2274      	movs	r2, #116	; 0x74
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2221      	movs	r2, #33	; 0x21
 8001d36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d38:	f7fe fd2e 	bl	8000798 <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1dba      	adds	r2, r7, #6
 8001d44:	2150      	movs	r1, #80	; 0x50
 8001d46:	8812      	ldrh	r2, [r2, #0]
 8001d48:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1dba      	adds	r2, r7, #6
 8001d4e:	2152      	movs	r1, #82	; 0x52
 8001d50:	8812      	ldrh	r2, [r2, #0]
 8001d52:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	015b      	lsls	r3, r3, #5
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d108      	bne.n	8001d72 <HAL_UART_Transmit+0xaa>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e003      	b.n	8001d7a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2274      	movs	r2, #116	; 0x74
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001d82:	e02d      	b.n	8001de0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	f000 fe1b 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e039      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	881a      	ldrh	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	05d2      	lsls	r2, r2, #23
 8001dae:	0dd2      	lsrs	r2, r2, #23
 8001db0:	b292      	uxth	r2, r2
 8001db2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	3302      	adds	r3, #2
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e008      	b.n	8001dce <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2252      	movs	r2, #82	; 0x52
 8001dd2:	5a9b      	ldrh	r3, [r3, r2]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2252      	movs	r2, #82	; 0x52
 8001dde:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2252      	movs	r2, #82	; 0x52
 8001de4:	5a9b      	ldrh	r3, [r3, r2]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1cb      	bne.n	8001d84 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	0013      	movs	r3, r2
 8001df6:	2200      	movs	r2, #0
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	f000 fde7 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 8001dfe:	1e03      	subs	r3, r0, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e005      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
  }
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b008      	add	sp, #32
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b0ab      	sub	sp, #172	; 0xac
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	22a4      	movs	r2, #164	; 0xa4
 8001e2c:	18b9      	adds	r1, r7, r2
 8001e2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	20a0      	movs	r0, #160	; 0xa0
 8001e38:	1839      	adds	r1, r7, r0
 8001e3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	219c      	movs	r1, #156	; 0x9c
 8001e44:	1879      	adds	r1, r7, r1
 8001e46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e48:	0011      	movs	r1, r2
 8001e4a:	18bb      	adds	r3, r7, r2
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a99      	ldr	r2, [pc, #612]	; (80020b4 <HAL_UART_IRQHandler+0x298>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	2298      	movs	r2, #152	; 0x98
 8001e54:	18bc      	adds	r4, r7, r2
 8001e56:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001e58:	18bb      	adds	r3, r7, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d114      	bne.n	8001e8a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e6a:	183b      	adds	r3, r7, r0
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	4013      	ands	r3, r2
 8001e72:	d00a      	beq.n	8001e8a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d100      	bne.n	8001e7e <HAL_UART_IRQHandler+0x62>
 8001e7c:	e296      	b.n	80023ac <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	0010      	movs	r0, r2
 8001e86:	4798      	blx	r3
      }
      return;
 8001e88:	e290      	b.n	80023ac <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e8a:	2398      	movs	r3, #152	; 0x98
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d100      	bne.n	8001e96 <HAL_UART_IRQHandler+0x7a>
 8001e94:	e114      	b.n	80020c0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e96:	239c      	movs	r3, #156	; 0x9c
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d106      	bne.n	8001eb0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001ea2:	23a0      	movs	r3, #160	; 0xa0
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <HAL_UART_IRQHandler+0x29c>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d100      	bne.n	8001eb0 <HAL_UART_IRQHandler+0x94>
 8001eae:	e107      	b.n	80020c0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001eb0:	23a4      	movs	r3, #164	; 0xa4
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d012      	beq.n	8001ee2 <HAL_UART_IRQHandler+0xc6>
 8001ebc:	23a0      	movs	r3, #160	; 0xa0
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	589b      	ldr	r3, [r3, r2]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ee2:	23a4      	movs	r3, #164	; 0xa4
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d011      	beq.n	8001f12 <HAL_UART_IRQHandler+0xf6>
 8001eee:	239c      	movs	r3, #156	; 0x9c
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2202      	movs	r2, #2
 8001f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	589b      	ldr	r3, [r3, r2]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f12:	23a4      	movs	r3, #164	; 0xa4
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d011      	beq.n	8001f42 <HAL_UART_IRQHandler+0x126>
 8001f1e:	239c      	movs	r3, #156	; 0x9c
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	589b      	ldr	r3, [r3, r2]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f42:	23a4      	movs	r3, #164	; 0xa4
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d017      	beq.n	8001f7e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f4e:	23a0      	movs	r3, #160	; 0xa0
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	d105      	bne.n	8001f66 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f5a:	239c      	movs	r3, #156	; 0x9c
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f64:	d00b      	beq.n	8001f7e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	589b      	ldr	r3, [r3, r2]
 8001f74:	2208      	movs	r2, #8
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f7e:	23a4      	movs	r3, #164	; 0xa4
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_UART_IRQHandler+0x198>
 8001f8c:	23a0      	movs	r3, #160	; 0xa0
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	04db      	lsls	r3, r3, #19
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00c      	beq.n	8001fb4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	589b      	ldr	r3, [r3, r2]
 8001faa:	2220      	movs	r2, #32
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	589b      	ldr	r3, [r3, r2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_UART_IRQHandler+0x1a4>
 8001fbe:	e1f7      	b.n	80023b0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fc0:	23a4      	movs	r3, #164	; 0xa4
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d00e      	beq.n	8001fea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fcc:	23a0      	movs	r3, #160	; 0xa0
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d008      	beq.n	8001fea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	589b      	ldr	r3, [r3, r2]
 8001ff0:	2194      	movs	r1, #148	; 0x94
 8001ff2:	187a      	adds	r2, r7, r1
 8001ff4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d004      	beq.n	800200e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002004:	187b      	adds	r3, r7, r1
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2228      	movs	r2, #40	; 0x28
 800200a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800200c:	d047      	beq.n	800209e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 fd9f 	bl	8002b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2240      	movs	r2, #64	; 0x40
 800201e:	4013      	ands	r3, r2
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d137      	bne.n	8002094 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002024:	f3ef 8310 	mrs	r3, PRIMASK
 8002028:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800202a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800202c:	2090      	movs	r0, #144	; 0x90
 800202e:	183a      	adds	r2, r7, r0
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002038:	f383 8810 	msr	PRIMASK, r3
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	438a      	bics	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	183b      	adds	r3, r7, r0
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002056:	f383 8810 	msr	PRIMASK, r3
}
 800205a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	2b00      	cmp	r3, #0
 8002062:	d012      	beq.n	800208a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_UART_IRQHandler+0x2a0>)
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fd1d 	bl	8000ab0 <HAL_DMA_Abort_IT>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d01a      	beq.n	80020b0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	0018      	movs	r0, r3
 8002086:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002088:	e012      	b.n	80020b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 f9a5 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002092:	e00d      	b.n	80020b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f000 f9a0 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209c:	e008      	b.n	80020b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f99b 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	2100      	movs	r1, #0
 80020ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80020ae:	e17f      	b.n	80023b0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	46c0      	nop			; (mov r8, r8)
    return;
 80020b2:	e17d      	b.n	80023b0 <HAL_UART_IRQHandler+0x594>
 80020b4:	0000080f 	.word	0x0000080f
 80020b8:	04000120 	.word	0x04000120
 80020bc:	08002c19 	.word	0x08002c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d000      	beq.n	80020ca <HAL_UART_IRQHandler+0x2ae>
 80020c8:	e131      	b.n	800232e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80020ca:	23a4      	movs	r3, #164	; 0xa4
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2210      	movs	r2, #16
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_UART_IRQHandler+0x2bc>
 80020d6:	e12a      	b.n	800232e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80020d8:	23a0      	movs	r3, #160	; 0xa0
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2210      	movs	r2, #16
 80020e0:	4013      	ands	r3, r2
 80020e2:	d100      	bne.n	80020e6 <HAL_UART_IRQHandler+0x2ca>
 80020e4:	e123      	b.n	800232e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d000      	beq.n	80020fe <HAL_UART_IRQHandler+0x2e2>
 80020fc:	e09b      	b.n	8002236 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	217e      	movs	r1, #126	; 0x7e
 8002108:	187b      	adds	r3, r7, r1
 800210a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800210c:	187b      	adds	r3, r7, r1
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <HAL_UART_IRQHandler+0x2fa>
 8002114:	e14e      	b.n	80023b4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2258      	movs	r2, #88	; 0x58
 800211a:	5a9b      	ldrh	r3, [r3, r2]
 800211c:	187a      	adds	r2, r7, r1
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d300      	bcc.n	8002126 <HAL_UART_IRQHandler+0x30a>
 8002124:	e146      	b.n	80023b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	187a      	adds	r2, r7, r1
 800212a:	215a      	movs	r1, #90	; 0x5a
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b20      	cmp	r3, #32
 8002138:	d06e      	beq.n	8002218 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800213a:	f3ef 8310 	mrs	r3, PRIMASK
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002142:	67bb      	str	r3, [r7, #120]	; 0x78
 8002144:	2301      	movs	r3, #1
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	f383 8810 	msr	PRIMASK, r3
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	499a      	ldr	r1, [pc, #616]	; (80023c4 <HAL_UART_IRQHandler+0x5a8>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	f383 8810 	msr	PRIMASK, r3
}
 800216a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216c:	f3ef 8310 	mrs	r3, PRIMASK
 8002170:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
 8002176:	2301      	movs	r3, #1
 8002178:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217c:	f383 8810 	msr	PRIMASK, r3
}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	438a      	bics	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002198:	f383 8810 	msr	PRIMASK, r3
}
 800219c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219e:	f3ef 8310 	mrs	r3, PRIMASK
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80021a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a6:	673b      	str	r3, [r7, #112]	; 0x70
 80021a8:	2301      	movs	r3, #1
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	438a      	bics	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ca:	f383 8810 	msr	PRIMASK, r3
}
 80021ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021dc:	f3ef 8310 	mrs	r3, PRIMASK
 80021e0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80021e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021e6:	2301      	movs	r3, #1
 80021e8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2110      	movs	r1, #16
 80021fe:	438a      	bics	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002204:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002208:	f383 8810 	msr	PRIMASK, r3
}
 800220c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	0018      	movs	r0, r3
 8002214:	f7fe fc14 	bl	8000a40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2258      	movs	r2, #88	; 0x58
 800221c:	5a9a      	ldrh	r2, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	215a      	movs	r1, #90	; 0x5a
 8002222:	5a5b      	ldrh	r3, [r3, r1]
 8002224:	b29b      	uxth	r3, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f8dc 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002234:	e0be      	b.n	80023b4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2258      	movs	r2, #88	; 0x58
 800223a:	5a99      	ldrh	r1, [r3, r2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	225a      	movs	r2, #90	; 0x5a
 8002240:	5a9b      	ldrh	r3, [r3, r2]
 8002242:	b29a      	uxth	r2, r3
 8002244:	208e      	movs	r0, #142	; 0x8e
 8002246:	183b      	adds	r3, r7, r0
 8002248:	1a8a      	subs	r2, r1, r2
 800224a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	225a      	movs	r2, #90	; 0x5a
 8002250:	5a9b      	ldrh	r3, [r3, r2]
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d100      	bne.n	800225a <HAL_UART_IRQHandler+0x43e>
 8002258:	e0ae      	b.n	80023b8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800225a:	183b      	adds	r3, r7, r0
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d100      	bne.n	8002264 <HAL_UART_IRQHandler+0x448>
 8002262:	e0a9      	b.n	80023b8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002264:	f3ef 8310 	mrs	r3, PRIMASK
 8002268:	60fb      	str	r3, [r7, #12]
  return(result);
 800226a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800226c:	2488      	movs	r4, #136	; 0x88
 800226e:	193a      	adds	r2, r7, r4
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	2301      	movs	r3, #1
 8002274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f383 8810 	msr	PRIMASK, r3
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	494f      	ldr	r1, [pc, #316]	; (80023c8 <HAL_UART_IRQHandler+0x5ac>)
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	193b      	adds	r3, r7, r4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f383 8810 	msr	PRIMASK, r3
}
 800229a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229c:	f3ef 8310 	mrs	r3, PRIMASK
 80022a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80022a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a4:	2484      	movs	r4, #132	; 0x84
 80022a6:	193a      	adds	r2, r7, r4
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f383 8810 	msr	PRIMASK, r3
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	438a      	bics	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ee:	2480      	movs	r4, #128	; 0x80
 80022f0:	193a      	adds	r2, r7, r4
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	f383 8810 	msr	PRIMASK, r3
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2110      	movs	r1, #16
 800230c:	438a      	bics	r2, r1
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	193b      	adds	r3, r7, r4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	f383 8810 	msr	PRIMASK, r3
}
 800231c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800231e:	183b      	adds	r3, r7, r0
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0011      	movs	r1, r2
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f860 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800232c:	e044      	b.n	80023b8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800232e:	23a4      	movs	r3, #164	; 0xa4
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	035b      	lsls	r3, r3, #13
 8002338:	4013      	ands	r3, r2
 800233a:	d010      	beq.n	800235e <HAL_UART_IRQHandler+0x542>
 800233c:	239c      	movs	r3, #156	; 0x9c
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	03db      	lsls	r3, r3, #15
 8002346:	4013      	ands	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	0352      	lsls	r2, r2, #13
 8002352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fca0 	bl	8002c9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800235c:	e02f      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800235e:	23a4      	movs	r3, #164	; 0xa4
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	4013      	ands	r3, r2
 8002368:	d00f      	beq.n	800238a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	4013      	ands	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01e      	beq.n	80023bc <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	0010      	movs	r0, r2
 8002386:	4798      	blx	r3
    }
    return;
 8002388:	e018      	b.n	80023bc <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800238a:	23a4      	movs	r3, #164	; 0xa4
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	4013      	ands	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x5a2>
 8002396:	23a0      	movs	r3, #160	; 0xa0
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fc4e 	bl	8002c46 <UART_EndTransmit_IT>
    return;
 80023aa:	e008      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
      return;
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	e006      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
    return;
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	e004      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
      return;
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	e002      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
      return;
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	e000      	b.n	80023be <HAL_UART_IRQHandler+0x5a2>
    return;
 80023bc:	46c0      	nop			; (mov r8, r8)
  }

}
 80023be:	46bd      	mov	sp, r7
 80023c0:	b02b      	add	sp, #172	; 0xac
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	fffffeff 	.word	0xfffffeff
 80023c8:	fffffedf 	.word	0xfffffedf

080023cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	000a      	movs	r2, r1
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800240c:	231e      	movs	r3, #30
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4abe      	ldr	r2, [pc, #760]	; (800272c <UART_SetConfig+0x328>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4ab9      	ldr	r2, [pc, #740]	; (8002730 <UART_SetConfig+0x32c>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4ab0      	ldr	r2, [pc, #704]	; (8002734 <UART_SetConfig+0x330>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4aac      	ldr	r2, [pc, #688]	; (8002738 <UART_SetConfig+0x334>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <UART_SetConfig+0xd6>
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <UART_SetConfig+0x338>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	2b03      	cmp	r3, #3
 8002494:	d00d      	beq.n	80024b2 <UART_SetConfig+0xae>
 8002496:	d81b      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d014      	beq.n	80024c6 <UART_SetConfig+0xc2>
 800249c:	d818      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <UART_SetConfig+0xa4>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d00a      	beq.n	80024bc <UART_SetConfig+0xb8>
 80024a6:	e013      	b.n	80024d0 <UART_SetConfig+0xcc>
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e0bd      	b.n	800262e <UART_SetConfig+0x22a>
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e0b8      	b.n	800262e <UART_SetConfig+0x22a>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e0b3      	b.n	800262e <UART_SetConfig+0x22a>
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2208      	movs	r2, #8
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e0ae      	b.n	800262e <UART_SetConfig+0x22a>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2210      	movs	r2, #16
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e0a9      	b.n	800262e <UART_SetConfig+0x22a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a98      	ldr	r2, [pc, #608]	; (8002740 <UART_SetConfig+0x33c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d134      	bne.n	800254e <UART_SetConfig+0x14a>
 80024e4:	4b95      	ldr	r3, [pc, #596]	; (800273c <UART_SetConfig+0x338>)
 80024e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	4013      	ands	r3, r2
 80024ee:	22c0      	movs	r2, #192	; 0xc0
 80024f0:	0292      	lsls	r2, r2, #10
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d017      	beq.n	8002526 <UART_SetConfig+0x122>
 80024f6:	22c0      	movs	r2, #192	; 0xc0
 80024f8:	0292      	lsls	r2, r2, #10
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d822      	bhi.n	8002544 <UART_SetConfig+0x140>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0292      	lsls	r2, r2, #10
 8002502:	4293      	cmp	r3, r2
 8002504:	d019      	beq.n	800253a <UART_SetConfig+0x136>
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0292      	lsls	r2, r2, #10
 800250a:	4293      	cmp	r3, r2
 800250c:	d81a      	bhi.n	8002544 <UART_SetConfig+0x140>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <UART_SetConfig+0x118>
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0252      	lsls	r2, r2, #9
 8002516:	4293      	cmp	r3, r2
 8002518:	d00a      	beq.n	8002530 <UART_SetConfig+0x12c>
 800251a:	e013      	b.n	8002544 <UART_SetConfig+0x140>
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e083      	b.n	800262e <UART_SetConfig+0x22a>
 8002526:	231f      	movs	r3, #31
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e07e      	b.n	800262e <UART_SetConfig+0x22a>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2204      	movs	r2, #4
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e079      	b.n	800262e <UART_SetConfig+0x22a>
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2208      	movs	r2, #8
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e074      	b.n	800262e <UART_SetConfig+0x22a>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2210      	movs	r2, #16
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e06f      	b.n	800262e <UART_SetConfig+0x22a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <UART_SetConfig+0x340>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d134      	bne.n	80025c2 <UART_SetConfig+0x1be>
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <UART_SetConfig+0x338>)
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4013      	ands	r3, r2
 8002562:	22c0      	movs	r2, #192	; 0xc0
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	4293      	cmp	r3, r2
 8002568:	d017      	beq.n	800259a <UART_SetConfig+0x196>
 800256a:	22c0      	movs	r2, #192	; 0xc0
 800256c:	0312      	lsls	r2, r2, #12
 800256e:	4293      	cmp	r3, r2
 8002570:	d822      	bhi.n	80025b8 <UART_SetConfig+0x1b4>
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0312      	lsls	r2, r2, #12
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <UART_SetConfig+0x1aa>
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4293      	cmp	r3, r2
 8002580:	d81a      	bhi.n	80025b8 <UART_SetConfig+0x1b4>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <UART_SetConfig+0x18c>
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	02d2      	lsls	r2, r2, #11
 800258a:	4293      	cmp	r3, r2
 800258c:	d00a      	beq.n	80025a4 <UART_SetConfig+0x1a0>
 800258e:	e013      	b.n	80025b8 <UART_SetConfig+0x1b4>
 8002590:	231f      	movs	r3, #31
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e049      	b.n	800262e <UART_SetConfig+0x22a>
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e044      	b.n	800262e <UART_SetConfig+0x22a>
 80025a4:	231f      	movs	r3, #31
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2204      	movs	r2, #4
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e03f      	b.n	800262e <UART_SetConfig+0x22a>
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e03a      	b.n	800262e <UART_SetConfig+0x22a>
 80025b8:	231f      	movs	r3, #31
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2210      	movs	r2, #16
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e035      	b.n	800262e <UART_SetConfig+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a60      	ldr	r2, [pc, #384]	; (8002748 <UART_SetConfig+0x344>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d104      	bne.n	80025d6 <UART_SetConfig+0x1d2>
 80025cc:	231f      	movs	r3, #31
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e02b      	b.n	800262e <UART_SetConfig+0x22a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <UART_SetConfig+0x348>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d104      	bne.n	80025ea <UART_SetConfig+0x1e6>
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e021      	b.n	800262e <UART_SetConfig+0x22a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a58      	ldr	r2, [pc, #352]	; (8002750 <UART_SetConfig+0x34c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d104      	bne.n	80025fe <UART_SetConfig+0x1fa>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e017      	b.n	800262e <UART_SetConfig+0x22a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a54      	ldr	r2, [pc, #336]	; (8002754 <UART_SetConfig+0x350>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0x20e>
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e00d      	b.n	800262e <UART_SetConfig+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a50      	ldr	r2, [pc, #320]	; (8002758 <UART_SetConfig+0x354>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d104      	bne.n	8002626 <UART_SetConfig+0x222>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e003      	b.n	800262e <UART_SetConfig+0x22a>
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2210      	movs	r2, #16
 800262c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	429a      	cmp	r2, r3
 8002638:	d15d      	bne.n	80026f6 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d015      	beq.n	8002670 <UART_SetConfig+0x26c>
 8002644:	dc18      	bgt.n	8002678 <UART_SetConfig+0x274>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00d      	beq.n	8002666 <UART_SetConfig+0x262>
 800264a:	dc15      	bgt.n	8002678 <UART_SetConfig+0x274>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <UART_SetConfig+0x252>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d005      	beq.n	8002660 <UART_SetConfig+0x25c>
 8002654:	e010      	b.n	8002678 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7ff f9cd 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 800265a:	0003      	movs	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]
        break;
 800265e:	e012      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <UART_SetConfig+0x358>)
 8002662:	61bb      	str	r3, [r7, #24]
        break;
 8002664:	e00f      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002666:	f7ff f93b 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]
        break;
 800266e:	e00a      	b.n	8002686 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	61bb      	str	r3, [r7, #24]
        break;
 8002676:	e006      	b.n	8002686 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800267c:	231e      	movs	r3, #30
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
        break;
 8002684:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d100      	bne.n	800268e <UART_SetConfig+0x28a>
 800268c:	e095      	b.n	80027ba <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	005a      	lsls	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	18d2      	adds	r2, r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0019      	movs	r1, r3
 80026a0:	0010      	movs	r0, r2
 80026a2:	f7fd fd2f 	bl	8000104 <__udivsi3>
 80026a6:	0003      	movs	r3, r0
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	d91c      	bls.n	80026ec <UART_SetConfig+0x2e8>
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d217      	bcs.n	80026ec <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	200e      	movs	r0, #14
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	210f      	movs	r1, #15
 80026c6:	438a      	bics	r2, r1
 80026c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	b299      	uxth	r1, r3
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	183a      	adds	r2, r7, r0
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	183a      	adds	r2, r7, r0
 80026e6:	8812      	ldrh	r2, [r2, #0]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	e066      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80026ec:	231e      	movs	r3, #30
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e061      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026f6:	231f      	movs	r3, #31
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d02f      	beq.n	8002760 <UART_SetConfig+0x35c>
 8002700:	dc32      	bgt.n	8002768 <UART_SetConfig+0x364>
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00d      	beq.n	8002722 <UART_SetConfig+0x31e>
 8002706:	dc2f      	bgt.n	8002768 <UART_SetConfig+0x364>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <UART_SetConfig+0x30e>
 800270c:	2b02      	cmp	r3, #2
 800270e:	d005      	beq.n	800271c <UART_SetConfig+0x318>
 8002710:	e02a      	b.n	8002768 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002712:	f7ff f96f 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8002716:	0003      	movs	r3, r0
 8002718:	61bb      	str	r3, [r7, #24]
        break;
 800271a:	e02c      	b.n	8002776 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <UART_SetConfig+0x358>)
 800271e:	61bb      	str	r3, [r7, #24]
        break;
 8002720:	e029      	b.n	8002776 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002722:	f7ff f8dd 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]
        break;
 800272a:	e024      	b.n	8002776 <UART_SetConfig+0x372>
 800272c:	efff69f3 	.word	0xefff69f3
 8002730:	ffffcfff 	.word	0xffffcfff
 8002734:	fffff4ff 	.word	0xfffff4ff
 8002738:	40013800 	.word	0x40013800
 800273c:	40021000 	.word	0x40021000
 8002740:	40004400 	.word	0x40004400
 8002744:	40004800 	.word	0x40004800
 8002748:	40004c00 	.word	0x40004c00
 800274c:	40005000 	.word	0x40005000
 8002750:	40011400 	.word	0x40011400
 8002754:	40011800 	.word	0x40011800
 8002758:	40011c00 	.word	0x40011c00
 800275c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	61bb      	str	r3, [r7, #24]
        break;
 8002766:	e006      	b.n	8002776 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
        break;
 8002774:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01e      	beq.n	80027ba <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	085a      	lsrs	r2, r3, #1
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0019      	movs	r1, r3
 800278c:	0010      	movs	r0, r2
 800278e:	f7fd fcb9 	bl	8000104 <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	b29b      	uxth	r3, r3
 8002796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b0f      	cmp	r3, #15
 800279c:	d909      	bls.n	80027b2 <UART_SetConfig+0x3ae>
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d204      	bcs.n	80027b2 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e003      	b.n	80027ba <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027c6:	231e      	movs	r3, #30
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b008      	add	sp, #32
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00b      	beq.n	80027fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <UART_AdvFeatureConfig+0x144>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2202      	movs	r2, #2
 8002804:	4013      	ands	r3, r2
 8002806:	d00b      	beq.n	8002820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a43      	ldr	r2, [pc, #268]	; (800291c <UART_AdvFeatureConfig+0x148>)
 8002810:	4013      	ands	r3, r2
 8002812:	0019      	movs	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2204      	movs	r2, #4
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a3b      	ldr	r2, [pc, #236]	; (8002920 <UART_AdvFeatureConfig+0x14c>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2208      	movs	r2, #8
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a34      	ldr	r2, [pc, #208]	; (8002924 <UART_AdvFeatureConfig+0x150>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	d00b      	beq.n	8002886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a2c      	ldr	r2, [pc, #176]	; (8002928 <UART_AdvFeatureConfig+0x154>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2220      	movs	r2, #32
 800288c:	4013      	ands	r3, r2
 800288e:	d00b      	beq.n	80028a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a25      	ldr	r2, [pc, #148]	; (800292c <UART_AdvFeatureConfig+0x158>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	4013      	ands	r3, r2
 80028b0:	d01d      	beq.n	80028ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <UART_AdvFeatureConfig+0x15c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	035b      	lsls	r3, r3, #13
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10b      	bne.n	80028ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <UART_AdvFeatureConfig+0x160>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <UART_AdvFeatureConfig+0x164>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
  }
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}
 8002918:	fffdffff 	.word	0xfffdffff
 800291c:	fffeffff 	.word	0xfffeffff
 8002920:	fffbffff 	.word	0xfffbffff
 8002924:	ffff7fff 	.word	0xffff7fff
 8002928:	ffffefff 	.word	0xffffefff
 800292c:	ffffdfff 	.word	0xffffdfff
 8002930:	ffefffff 	.word	0xffefffff
 8002934:	ff9fffff 	.word	0xff9fffff
 8002938:	fff7ffff 	.word	0xfff7ffff

0800293c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	2100      	movs	r1, #0
 800294a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800294c:	f7fd ff24 	bl	8000798 <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	4013      	ands	r3, r2
 800295e:	2b08      	cmp	r3, #8
 8002960:	d10c      	bne.n	800297c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0391      	lsls	r1, r2, #14
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <UART_CheckIdleState+0x8c>)
 800296c:	9200      	str	r2, [sp, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	f000 f82c 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d001      	beq.n	800297c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e021      	b.n	80029c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2204      	movs	r2, #4
 8002984:	4013      	ands	r3, r2
 8002986:	2b04      	cmp	r3, #4
 8002988:	d10c      	bne.n	80029a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	03d1      	lsls	r1, r2, #15
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <UART_CheckIdleState+0x8c>)
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	f000 f818 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d001      	beq.n	80029a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e00d      	b.n	80029c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2274      	movs	r2, #116	; 0x74
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	01ffffff 	.word	0x01ffffff

080029cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b094      	sub	sp, #80	; 0x50
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	1dfb      	adds	r3, r7, #7
 80029da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029dc:	e0a3      	b.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e0:	3301      	adds	r3, #1
 80029e2:	d100      	bne.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80029e4:	e09f      	b.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fd fed7 	bl	8000798 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <UART_WaitOnFlagUntilTimeout+0x30>
 80029f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13d      	bne.n	8002a78 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	494c      	ldr	r1, [pc, #304]	; (8002b50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a1e:	400a      	ands	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
 8002a38:	2301      	movs	r3, #1
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	f383 8810 	msr	PRIMASK, r3
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	438a      	bics	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2274      	movs	r2, #116	; 0x74
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e067      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4013      	ands	r3, r2
 8002a82:	d050      	beq.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	401a      	ands	r2, r3
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d146      	bne.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa6:	613b      	str	r3, [r7, #16]
  return(result);
 8002aa8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	2301      	movs	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f383 8810 	msr	PRIMASK, r3
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4923      	ldr	r1, [pc, #140]	; (8002b50 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f383 8810 	msr	PRIMASK, r3
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ada:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ade:	2301      	movs	r3, #1
 8002ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	f383 8810 	msr	PRIMASK, r3
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	438a      	bics	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f383 8810 	msr	PRIMASK, r3
}
 8002b04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	2120      	movs	r1, #32
 8002b18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2274      	movs	r2, #116	; 0x74
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e010      	b.n	8002b48 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	425a      	negs	r2, r3
 8002b36:	4153      	adcs	r3, r2
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d100      	bne.n	8002b46 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002b44:	e74b      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b014      	add	sp, #80	; 0x50
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	fffffe5f 	.word	0xfffffe5f

08002b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08e      	sub	sp, #56	; 0x38
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b60:	617b      	str	r3, [r7, #20]
  return(result);
 8002b62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4925      	ldr	r1, [pc, #148]	; (8002c14 <UART_EndRxTransfer+0xc0>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f383 8810 	msr	PRIMASK, r3
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b92:	623b      	str	r3, [r7, #32]
  return(result);
 8002b94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	f383 8810 	msr	PRIMASK, r3
}
 8002bbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d118      	bne.n	8002bfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2110      	movs	r1, #16
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b00e      	add	sp, #56	; 0x38
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fffffedf 	.word	0xfffffedf

08002c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	225a      	movs	r2, #90	; 0x5a
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2252      	movs	r2, #82	; 0x52
 8002c32:	2100      	movs	r1, #0
 8002c34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff fbcf 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b086      	sub	sp, #24
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	438a      	bics	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff fb9c 	bl	80023cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	2600      	movs	r6, #0
 8002cb0:	4d0c      	ldr	r5, [pc, #48]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	f000 f821 	bl	8002d04 <_init>
 8002cc2:	4d0a      	ldr	r5, [pc, #40]	; (8002cec <__libc_init_array+0x40>)
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	00b3      	lsls	r3, r6, #2
 8002cd2:	58eb      	ldr	r3, [r5, r3]
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	00b3      	lsls	r3, r6, #2
 8002cdc:	58eb      	ldr	r3, [r5, r3]
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08002d54 	.word	0x08002d54
 8002ce8:	08002d54 	.word	0x08002d54
 8002cec:	08002d54 	.word	0x08002d54
 8002cf0:	08002d58 	.word	0x08002d58

08002cf4 <memset>:
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	1882      	adds	r2, r0, r2
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	7019      	strb	r1, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
