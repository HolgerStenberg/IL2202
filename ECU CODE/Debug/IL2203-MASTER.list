
IL2203-MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e90  08002e90  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e90  08002e90  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e90  08002e90  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000001c  08002eb4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002eb4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097d0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  00029814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ec  00000000  00000000  0002bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b35  00000000  00000000  000463d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5d9  00000000  00000000  0004ff09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef4e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017e0  00000000  00000000  000ef534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002e40 	.word	0x08002e40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002e40 	.word	0x08002e40

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fae3 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f829 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f90b 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 f8eb 	bl	8000408 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000232:	f000 f8b9 	bl	80003a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f887 	bl	8000348 <MX_USART1_UART_Init>
		  }
	  }

*/

	  for (int i=0; i<100; i++){
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e00b      	b.n	8000258 <main+0x3c>
		  HAL_UART_Transmit(&huart1, myTxData, 16, 10);
 8000240:	490c      	ldr	r1, [pc, #48]	; (8000274 <main+0x58>)
 8000242:	480d      	ldr	r0, [pc, #52]	; (8000278 <main+0x5c>)
 8000244:	230a      	movs	r3, #10
 8000246:	2210      	movs	r2, #16
 8000248:	f001 fddc 	bl	8001e04 <HAL_UART_Transmit>
		  HAL_Delay(10);
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fb31 	bl	80008b4 <HAL_Delay>
	  for (int i=0; i<100; i++){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3301      	adds	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b63      	cmp	r3, #99	; 0x63
 800025c:	ddf0      	ble.n	8000240 <main+0x24>
	  }

	  while(1){
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2120      	movs	r1, #32
 8000264:	0018      	movs	r0, r3
 8000266:	f000 ff5e 	bl	8001126 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800026a:	20c8      	movs	r0, #200	; 0xc8
 800026c:	f000 fb22 	bl	80008b4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000270:	e7f5      	b.n	800025e <main+0x42>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000000 	.word	0x20000000
 8000278:	20000038 	.word	0x20000038

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b099      	sub	sp, #100	; 0x64
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	242c      	movs	r4, #44	; 0x2c
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2334      	movs	r3, #52	; 0x34
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fdcf 	bl	8002e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	231c      	movs	r3, #28
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fdc7 	bl	8002e30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	231c      	movs	r3, #28
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 fdc0 	bl	8002e30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0212      	lsls	r2, r2, #8
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	22a0      	movs	r2, #160	; 0xa0
 80002d6:	0392      	lsls	r2, r2, #14
 80002d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2201      	movs	r2, #1
 80002de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ff3a 	bl	800115c <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002ec:	f000 f914 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	211c      	movs	r1, #28
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 faaa 	bl	8001868 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000318:	f000 f8fe 	bl	8000518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800031c:	003b      	movs	r3, r7
 800031e:	2203      	movs	r2, #3
 8000320:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fc13 	bl	8001b5c <HAL_RCCEx_PeriphCLKConfig>
 8000336:	1e03      	subs	r3, r0, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800033a:	f000 f8ed 	bl	8000518 <Error_Handler>
  }
}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b019      	add	sp, #100	; 0x64
 8000344:	bd90      	pop	{r4, r7, pc}
	...

08000348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <MX_USART1_UART_Init+0x5c>)
 8000350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000354:	2296      	movs	r2, #150	; 0x96
 8000356:	0192      	lsls	r2, r2, #6
 8000358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_USART1_UART_Init+0x58>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fce5 	bl	8001d5c <HAL_UART_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000396:	f000 f8bf 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	20000038 	.word	0x20000038
 80003a4:	40013800 	.word	0x40013800

080003a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART2_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003b4:	22e1      	movs	r2, #225	; 0xe1
 80003b6:	0252      	lsls	r2, r2, #9
 80003b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fcb5 	bl	8001d5c <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f88f 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200000bc 	.word	0x200000bc
 8000404:	40004400 	.word	0x40004400

08000408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_DMA_Init+0x38>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_DMA_Init+0x38>)
 8000414:	2101      	movs	r1, #1
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_DMA_Init+0x38>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	2201      	movs	r2, #1
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	2009      	movs	r0, #9
 800042c:	f000 fb12 	bl	8000a54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000430:	2009      	movs	r0, #9
 8000432:	f000 fb24 	bl	8000a7e <HAL_NVIC_EnableIRQ>

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	; 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 fceb 	bl	8002e30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_GPIO_Init+0xcc>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <MX_GPIO_Init+0xcc>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0309      	lsls	r1, r1, #12
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b29      	ldr	r3, [pc, #164]	; (8000510 <MX_GPIO_Init+0xcc>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	031b      	lsls	r3, r3, #12
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_GPIO_Init+0xcc>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b25      	ldr	r3, [pc, #148]	; (8000510 <MX_GPIO_Init+0xcc>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	03c9      	lsls	r1, r1, #15
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <MX_GPIO_Init+0xcc>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	03db      	lsls	r3, r3, #15
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <MX_GPIO_Init+0xcc>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_GPIO_Init+0xcc>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0289      	lsls	r1, r1, #10
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_GPIO_Init+0xcc>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	029b      	lsls	r3, r3, #10
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	2120      	movs	r1, #32
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fe18 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0192      	lsls	r2, r2, #6
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2284      	movs	r2, #132	; 0x84
 80004c8:	0392      	lsls	r2, r2, #14
 80004ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <MX_GPIO_Init+0xd0>)
 80004d6:	0019      	movs	r1, r3
 80004d8:	0010      	movs	r0, r2
 80004da:	f000 fc8f 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2220      	movs	r2, #32
 80004e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	2201      	movs	r2, #1
 80004ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004f8:	187a      	adds	r2, r7, r1
 80004fa:	2390      	movs	r3, #144	; 0x90
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	0011      	movs	r1, r2
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fc7b 	bl	8000dfc <HAL_GPIO_Init>

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b009      	add	sp, #36	; 0x24
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000
 8000514:	48000800 	.word	0x48000800

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	2101      	movs	r1, #1
 8000532:	430a      	orrs	r2, r1
 8000534:	619a      	str	r2, [r3, #24]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	2201      	movs	r2, #1
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	69da      	ldr	r2, [r3, #28]
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0549      	lsls	r1, r1, #21
 800054c:	430a      	orrs	r2, r1
 800054e:	61da      	str	r2, [r3, #28]
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_MspInit+0x44>)
 8000552:	69da      	ldr	r2, [r3, #28]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	055b      	lsls	r3, r3, #21
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b08d      	sub	sp, #52	; 0x34
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	241c      	movs	r4, #28
 8000576:	193b      	adds	r3, r7, r4
 8000578:	0018      	movs	r0, r3
 800057a:	2314      	movs	r3, #20
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f002 fc56 	bl	8002e30 <memset>
  if(huart->Instance==USART1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a5c      	ldr	r2, [pc, #368]	; (80006fc <HAL_UART_MspInit+0x190>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d13c      	bne.n	8000608 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058e:	4b5c      	ldr	r3, [pc, #368]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000590:	699a      	ldr	r2, [r3, #24]
 8000592:	4b5b      	ldr	r3, [pc, #364]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	01c9      	lsls	r1, r1, #7
 8000598:	430a      	orrs	r2, r1
 800059a:	619a      	str	r2, [r3, #24]
 800059c:	4b58      	ldr	r3, [pc, #352]	; (8000700 <HAL_UART_MspInit+0x194>)
 800059e:	699a      	ldr	r2, [r3, #24]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	01db      	lsls	r3, r3, #7
 80005a4:	4013      	ands	r3, r2
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b55      	ldr	r3, [pc, #340]	; (8000700 <HAL_UART_MspInit+0x194>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b54      	ldr	r3, [pc, #336]	; (8000700 <HAL_UART_MspInit+0x194>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b51      	ldr	r3, [pc, #324]	; (8000700 <HAL_UART_MspInit+0x194>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	22c0      	movs	r2, #192	; 0xc0
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2202      	movs	r2, #2
 80005d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2203      	movs	r2, #3
 80005e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	187a      	adds	r2, r7, r1
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fc03 	bl	8000dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	201b      	movs	r0, #27
 80005fc:	f000 fa2a 	bl	8000a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000600:	201b      	movs	r0, #27
 8000602:	f000 fa3c 	bl	8000a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000606:	e075      	b.n	80006f4 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a3d      	ldr	r2, [pc, #244]	; (8000704 <HAL_UART_MspInit+0x198>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d170      	bne.n	80006f4 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	0289      	lsls	r1, r1, #10
 800061c:	430a      	orrs	r2, r1
 800061e:	61da      	str	r2, [r3, #28]
 8000620:	4b37      	ldr	r3, [pc, #220]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	029b      	lsls	r3, r3, #10
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <HAL_UART_MspInit+0x194>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b30      	ldr	r3, [pc, #192]	; (8000700 <HAL_UART_MspInit+0x194>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800064a:	211c      	movs	r1, #28
 800064c:	187b      	adds	r3, r7, r1
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2202      	movs	r2, #2
 8000656:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	187a      	adds	r2, r7, r1
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fbc2 	bl	8000dfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <HAL_UART_MspInit+0x19c>)
 800067a:	4a24      	ldr	r2, [pc, #144]	; (800070c <HAL_UART_MspInit+0x1a0>)
 800067c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <HAL_UART_MspInit+0x19c>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_UART_MspInit+0x19c>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <HAL_UART_MspInit+0x19c>)
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <HAL_UART_MspInit+0x19c>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_UART_MspInit+0x19c>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_UART_MspInit+0x19c>)
 800069e:	2220      	movs	r2, #32
 80006a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_UART_MspInit+0x19c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_UART_MspInit+0x19c>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa04 	bl	8000ab8 <HAL_DMA_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 80006b4:	f7ff ff30 	bl	8000518 <Error_Handler>
    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_UART_MspInit+0x1a4>)
 80006ba:	23a8      	movs	r3, #168	; 0xa8
 80006bc:	58d3      	ldr	r3, [r2, r3]
 80006be:	4914      	ldr	r1, [pc, #80]	; (8000710 <HAL_UART_MspInit+0x1a4>)
 80006c0:	220f      	movs	r2, #15
 80006c2:	4393      	bics	r3, r2
 80006c4:	22a8      	movs	r2, #168	; 0xa8
 80006c6:	508b      	str	r3, [r1, r2]
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_UART_MspInit+0x1a4>)
 80006ca:	23a8      	movs	r3, #168	; 0xa8
 80006cc:	58d3      	ldr	r3, [r2, r3]
 80006ce:	4910      	ldr	r1, [pc, #64]	; (8000710 <HAL_UART_MspInit+0x1a4>)
 80006d0:	2209      	movs	r2, #9
 80006d2:	4313      	orrs	r3, r2
 80006d4:	22a8      	movs	r2, #168	; 0xa8
 80006d6:	508b      	str	r3, [r1, r2]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_UART_MspInit+0x19c>)
 80006dc:	671a      	str	r2, [r3, #112]	; 0x70
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_UART_MspInit+0x19c>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	201c      	movs	r0, #28
 80006ea:	f000 f9b3 	bl	8000a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ee:	201c      	movs	r0, #28
 80006f0:	f000 f9c5 	bl	8000a7e <HAL_NVIC_EnableIRQ>
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b00d      	add	sp, #52	; 0x34
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	40013800 	.word	0x40013800
 8000700:	40021000 	.word	0x40021000
 8000704:	40004400 	.word	0x40004400
 8000708:	20000140 	.word	0x20000140
 800070c:	40020008 	.word	0x40020008
 8000710:	40020000 	.word	0x40020000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f8a0 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <DMA1_Ch1_IRQHandler+0x14>)
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fa79 	bl	8000c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000140 	.word	0x20000140

0800075c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <USART1_IRQHandler+0x14>)
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fbf8 	bl	8001f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	20000038 	.word	0x20000038

08000774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <USART2_IRQHandler+0x14>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fbec 	bl	8001f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000bc 	.word	0x200000bc

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b4:	4c0b      	ldr	r4, [pc, #44]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007c2:	f7ff ffe3 	bl	800078c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007c6:	f002 fb0f 	bl	8002de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd27 	bl	800021c <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80007dc:	08002e98 	.word	0x08002e98
  ldr r2, =_sbss
 80007e0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80007e4:	20000188 	.word	0x20000188

080007e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_COMP_IRQHandler>
	...

080007ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <HAL_Init+0x24>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_Init+0x24>)
 80007f6:	2110      	movs	r1, #16
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 f809 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000802:	f7ff fe8f 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_InitTick+0x5c>)
 800081e:	681c      	ldr	r4, [r3, #0]
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0x60>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	0019      	movs	r1, r3
 8000826:	23fa      	movs	r3, #250	; 0xfa
 8000828:	0098      	lsls	r0, r3, #2
 800082a:	f7ff fc6b 	bl	8000104 <__udivsi3>
 800082e:	0003      	movs	r3, r0
 8000830:	0019      	movs	r1, r3
 8000832:	0020      	movs	r0, r4
 8000834:	f7ff fc66 	bl	8000104 <__udivsi3>
 8000838:	0003      	movs	r3, r0
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f92f 	bl	8000a9e <HAL_SYSTICK_Config>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e00f      	b.n	8000868 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d80b      	bhi.n	8000866 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2301      	movs	r3, #1
 8000852:	425b      	negs	r3, r3
 8000854:	2200      	movs	r2, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 f8fc 	bl	8000a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_InitTick+0x64>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b003      	add	sp, #12
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	20000010 	.word	0x20000010
 8000874:	20000018 	.word	0x20000018
 8000878:	20000014 	.word	0x20000014

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x1c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x20>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	18d2      	adds	r2, r2, r3
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_IncTick+0x20>)
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000018 	.word	0x20000018
 800089c:	20000184 	.word	0x20000184

080008a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <HAL_GetTick+0x10>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000184 	.word	0x20000184

080008b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008bc:	f7ff fff0 	bl	80008a0 <HAL_GetTick>
 80008c0:	0003      	movs	r3, r0
 80008c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	d005      	beq.n	80008da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_Delay+0x44>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	001a      	movs	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	f7ff ffe0 	bl	80008a0 <HAL_GetTick>
 80008e0:	0002      	movs	r2, r0
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8f7      	bhi.n	80008dc <HAL_Delay+0x28>
  {
  }
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b004      	add	sp, #16
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000018 	.word	0x20000018

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	0002      	movs	r2, r0
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b7f      	cmp	r3, #127	; 0x7f
 800090e:	d809      	bhi.n	8000924 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	001a      	movs	r2, r3
 8000916:	231f      	movs	r3, #31
 8000918:	401a      	ands	r2, r3
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_EnableIRQ+0x30>)
 800091c:	2101      	movs	r1, #1
 800091e:	4091      	lsls	r1, r2
 8000920:	000a      	movs	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	d828      	bhi.n	8000998 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <__NVIC_SetPriority+0xd4>)
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	089b      	lsrs	r3, r3, #2
 8000950:	33c0      	adds	r3, #192	; 0xc0
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	589b      	ldr	r3, [r3, r2]
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	0011      	movs	r1, r2
 800095c:	2203      	movs	r2, #3
 800095e:	400a      	ands	r2, r1
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	21ff      	movs	r1, #255	; 0xff
 8000964:	4091      	lsls	r1, r2
 8000966:	000a      	movs	r2, r1
 8000968:	43d2      	mvns	r2, r2
 800096a:	401a      	ands	r2, r3
 800096c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	401a      	ands	r2, r3
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0018      	movs	r0, r3
 800097c:	2303      	movs	r3, #3
 800097e:	4003      	ands	r3, r0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	481f      	ldr	r0, [pc, #124]	; (8000a04 <__NVIC_SetPriority+0xd4>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	430a      	orrs	r2, r1
 8000990:	33c0      	adds	r3, #192	; 0xc0
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000996:	e031      	b.n	80009fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <__NVIC_SetPriority+0xd8>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0019      	movs	r1, r3
 80009a0:	230f      	movs	r3, #15
 80009a2:	400b      	ands	r3, r1
 80009a4:	3b08      	subs	r3, #8
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3306      	adds	r3, #6
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	18d3      	adds	r3, r2, r3
 80009ae:	3304      	adds	r3, #4
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1dfa      	adds	r2, r7, #7
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	0011      	movs	r1, r2
 80009b8:	2203      	movs	r2, #3
 80009ba:	400a      	ands	r2, r1
 80009bc:	00d2      	lsls	r2, r2, #3
 80009be:	21ff      	movs	r1, #255	; 0xff
 80009c0:	4091      	lsls	r1, r2
 80009c2:	000a      	movs	r2, r1
 80009c4:	43d2      	mvns	r2, r2
 80009c6:	401a      	ands	r2, r3
 80009c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	401a      	ands	r2, r3
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	2303      	movs	r3, #3
 80009da:	4003      	ands	r3, r0
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <__NVIC_SetPriority+0xd8>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	001c      	movs	r4, r3
 80009e8:	230f      	movs	r3, #15
 80009ea:	4023      	ands	r3, r4
 80009ec:	3b08      	subs	r3, #8
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	430a      	orrs	r2, r1
 80009f2:	3306      	adds	r3, #6
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	18c3      	adds	r3, r0, r3
 80009f8:	3304      	adds	r3, #4
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	045b      	lsls	r3, r3, #17
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d301      	bcc.n	8000a24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a20:	2301      	movs	r3, #1
 8000a22:	e010      	b.n	8000a46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SysTick_Config+0x44>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	425b      	negs	r3, r3
 8000a30:	2103      	movs	r1, #3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff ff7c 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <SysTick_Config+0x44>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <SysTick_Config+0x44>)
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	e000e010 	.word	0xe000e010

08000a54 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	210f      	movs	r1, #15
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	1c02      	adds	r2, r0, #0
 8000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b004      	add	sp, #16
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	0002      	movs	r2, r0
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff33 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff ffaf 	bl	8000a0c <SysTick_Config>
 8000aae:	0003      	movs	r3, r0
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e036      	b.n	8000b3c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2221      	movs	r2, #33	; 0x21
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_DMA_Init+0x8c>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f932 	bl	8000d88 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2221      	movs	r2, #33	; 0x21
 8000b2e:	2101      	movs	r1, #1
 8000b30:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
}  
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b004      	add	sp, #16
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	ffffc00f 	.word	0xffffc00f

08000b48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2221      	movs	r2, #33	; 0x21
 8000b54:	5c9b      	ldrb	r3, [r3, r2]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d008      	beq.n	8000b6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2220      	movs	r2, #32
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e020      	b.n	8000bb0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	210e      	movs	r1, #14
 8000b7a:	438a      	bics	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b96:	2101      	movs	r1, #1
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2221      	movs	r2, #33	; 0x21
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2220      	movs	r2, #32
 8000baa:	2100      	movs	r1, #0
 8000bac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc0:	210f      	movs	r1, #15
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2221      	movs	r2, #33	; 0x21
 8000bcc:	5c9b      	ldrb	r3, [r3, r2]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d006      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e028      	b.n	8000c34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	210e      	movs	r1, #14
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	438a      	bics	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2221      	movs	r2, #33	; 0x21
 8000c16:	2101      	movs	r1, #1
 8000c18:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	2100      	movs	r1, #0
 8000c20:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	0010      	movs	r0, r2
 8000c32:	4798      	blx	r3
    } 
  }
  return status;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b084      	sub	sp, #16
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	2204      	movs	r2, #4
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	d024      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0x72>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d020      	beq.n	8000cb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2220      	movs	r2, #32
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d107      	bne.n	8000c8e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2104      	movs	r1, #4
 8000c8a:	438a      	bics	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	2104      	movs	r1, #4
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d100      	bne.n	8000ca8 <HAL_DMA_IRQHandler+0x66>
 8000ca6:	e06a      	b.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	0010      	movs	r0, r2
 8000cb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cb2:	e064      	b.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	2202      	movs	r2, #2
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d02b      	beq.n	8000d1c <HAL_DMA_IRQHandler+0xda>
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d027      	beq.n	8000d1c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	210a      	movs	r1, #10
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	2101      	movs	r1, #1
 8000cee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	000a      	movs	r2, r1
 8000cfe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2220      	movs	r2, #32
 8000d04:	2100      	movs	r1, #0
 8000d06:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d036      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	0010      	movs	r0, r2
 8000d18:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d1a:	e030      	b.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	2208      	movs	r2, #8
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d028      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2208      	movs	r2, #8
 8000d30:	4013      	ands	r3, r2
 8000d32:	d024      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	210e      	movs	r1, #14
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4091      	lsls	r1, r2
 8000d50:	000a      	movs	r2, r1
 8000d52:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2221      	movs	r2, #33	; 0x21
 8000d5e:	2101      	movs	r1, #1
 8000d60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	0010      	movs	r0, r2
 8000d7a:	4798      	blx	r3
    }
   }
}  
 8000d7c:	e7ff      	b.n	8000d7e <HAL_DMA_IRQHandler+0x13c>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	001a      	movs	r2, r3
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <DMA_CalcBaseAndBitshift+0x60>)
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d810      	bhi.n	8000dbe <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <DMA_CalcBaseAndBitshift+0x64>)
 8000da2:	4694      	mov	ip, r2
 8000da4:	4463      	add	r3, ip
 8000da6:	2114      	movs	r1, #20
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff f9ab 	bl	8000104 <__udivsi3>
 8000dae:	0003      	movs	r3, r0
 8000db0:	009a      	lsls	r2, r3, #2
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <DMA_CalcBaseAndBitshift+0x68>)
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000dbc:	e00f      	b.n	8000dde <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <DMA_CalcBaseAndBitshift+0x6c>)
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	2114      	movs	r1, #20
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff f99a 	bl	8000104 <__udivsi3>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	009a      	lsls	r2, r3, #2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <DMA_CalcBaseAndBitshift+0x70>)
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	40020407 	.word	0x40020407
 8000dec:	bffdfff8 	.word	0xbffdfff8
 8000df0:	40020000 	.word	0x40020000
 8000df4:	bffdfbf8 	.word	0xbffdfbf8
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e155      	b.n	80010b8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d100      	bne.n	8000e24 <HAL_GPIO_Init+0x28>
 8000e22:	e146      	b.n	80010b2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2203      	movs	r2, #3
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2203      	movs	r2, #3
 8000e36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d017      	beq.n	8000eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2203      	movs	r2, #3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	58d3      	ldr	r3, [r2, r3]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	4013      	ands	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2107      	movs	r1, #7
 8000f12:	400b      	ands	r3, r1
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	23c0      	movs	r3, #192	; 0xc0
 8000f68:	029b      	lsls	r3, r3, #10
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d100      	bne.n	8000f70 <HAL_GPIO_Init+0x174>
 8000f6e:	e0a0      	b.n	80010b2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_GPIO_Init+0x2d4>)
 8000f72:	699a      	ldr	r2, [r3, #24]
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2d4>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	4b54      	ldr	r3, [pc, #336]	; (80010d0 <HAL_GPIO_Init+0x2d4>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	589b      	ldr	r3, [r3, r2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	2390      	movs	r3, #144	; 0x90
 8000fb0:	05db      	lsls	r3, r3, #23
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1ea>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a46      	ldr	r2, [pc, #280]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1e6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1e2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1de>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fea:	2300      	movs	r3, #0
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	2103      	movs	r1, #3
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffc:	4935      	ldr	r1, [pc, #212]	; (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43da      	mvns	r2, r3
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	4013      	ands	r3, r2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43da      	mvns	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	029b      	lsls	r3, r3, #10
 800104c:	4013      	ands	r3, r2
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	035b      	lsls	r3, r3, #13
 8001076:	4013      	ands	r3, r2
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43da      	mvns	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	039b      	lsls	r3, r3, #14
 80010a0:	4013      	ands	r3, r2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	40da      	lsrs	r2, r3
 80010c0:	1e13      	subs	r3, r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_GPIO_Init+0x2ca>
 80010c4:	e6a2      	b.n	8000e0c <HAL_GPIO_Init+0x10>
  } 
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	48001000 	.word	0x48001000
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	0008      	movs	r0, r1
 80010f6:	0011      	movs	r1, r2
 80010f8:	1cbb      	adds	r3, r7, #2
 80010fa:	1c02      	adds	r2, r0, #0
 80010fc:	801a      	strh	r2, [r3, #0]
 80010fe:	1c7b      	adds	r3, r7, #1
 8001100:	1c0a      	adds	r2, r1, #0
 8001102:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	000a      	movs	r2, r1
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800113a:	1cbb      	adds	r3, r7, #2
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4013      	ands	r3, r2
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	1cb9      	adds	r1, r7, #2
 800114a:	8809      	ldrh	r1, [r1, #0]
 800114c:	400b      	ands	r3, r1
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b004      	add	sp, #16
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f000 fb76 	bl	800185c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_RCC_OscConfig+0x20>
 800117a:	e08e      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117c:	4bc5      	ldr	r3, [pc, #788]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	220c      	movs	r2, #12
 8001182:	4013      	ands	r3, r2
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00e      	beq.n	80011a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4bc2      	ldr	r3, [pc, #776]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	220c      	movs	r2, #12
 800118e:	4013      	ands	r3, r2
 8001190:	2b08      	cmp	r3, #8
 8001192:	d117      	bne.n	80011c4 <HAL_RCC_OscConfig+0x68>
 8001194:	4bbf      	ldr	r3, [pc, #764]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	23c0      	movs	r3, #192	; 0xc0
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	401a      	ands	r2, r3
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10e      	bne.n	80011c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4bbb      	ldr	r3, [pc, #748]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x58>
 80011b2:	e071      	b.n	8001298 <HAL_RCC_OscConfig+0x13c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d000      	beq.n	80011be <HAL_RCC_OscConfig+0x62>
 80011bc:	e06c      	b.n	8001298 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	f000 fb4c 	bl	800185c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d107      	bne.n	80011dc <HAL_RCC_OscConfig+0x80>
 80011cc:	4bb1      	ldr	r3, [pc, #708]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4bb0      	ldr	r3, [pc, #704]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	0249      	lsls	r1, r1, #9
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e02f      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0xa2>
 80011e4:	4bab      	ldr	r3, [pc, #684]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4baa      	ldr	r3, [pc, #680]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011ea:	49ab      	ldr	r1, [pc, #684]	; (8001498 <HAL_RCC_OscConfig+0x33c>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba7      	ldr	r3, [pc, #668]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80011f6:	49a9      	ldr	r1, [pc, #676]	; (800149c <HAL_RCC_OscConfig+0x340>)
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e01e      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d10e      	bne.n	8001224 <HAL_RCC_OscConfig+0xc8>
 8001206:	4ba3      	ldr	r3, [pc, #652]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4ba2      	ldr	r3, [pc, #648]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	02c9      	lsls	r1, r1, #11
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	4b9f      	ldr	r3, [pc, #636]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	0249      	lsls	r1, r1, #9
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xe0>
 8001224:	4b9b      	ldr	r3, [pc, #620]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b9a      	ldr	r3, [pc, #616]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800122a:	499b      	ldr	r1, [pc, #620]	; (8001498 <HAL_RCC_OscConfig+0x33c>)
 800122c:	400a      	ands	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4b98      	ldr	r3, [pc, #608]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b97      	ldr	r3, [pc, #604]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001236:	4999      	ldr	r1, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x340>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d014      	beq.n	800126e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fb2c 	bl	80008a0 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff fb27 	bl	80008a0 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	; 0x64
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e2fd      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0xf2>
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb17 	bl	80008a0 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fb12 	bl	80008a0 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e2e8      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x11c>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x14a>
 80012a4:	e06c      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	220c      	movs	r2, #12
 80012ac:	4013      	ands	r3, r2
 80012ae:	d00e      	beq.n	80012ce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b0:	4b78      	ldr	r3, [pc, #480]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d11f      	bne.n	80012fc <HAL_RCC_OscConfig+0x1a0>
 80012bc:	4b75      	ldr	r3, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	23c0      	movs	r3, #192	; 0xc0
 80012c2:	025b      	lsls	r3, r3, #9
 80012c4:	401a      	ands	r2, r3
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b71      	ldr	r3, [pc, #452]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x188>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e2bb      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	22f8      	movs	r2, #248	; 0xf8
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00da      	lsls	r2, r3, #3
 80012f4:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e041      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d024      	beq.n	800134e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b62      	ldr	r3, [pc, #392]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fac6 	bl	80008a0 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fac1 	bl	80008a0 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e297      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b59      	ldr	r3, [pc, #356]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d0f1      	beq.n	800131a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b57      	ldr	r3, [pc, #348]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	22f8      	movs	r2, #248	; 0xf8
 800133c:	4393      	bics	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	00da      	lsls	r2, r3, #3
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e018      	b.n	8001380 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b50      	ldr	r3, [pc, #320]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001354:	2101      	movs	r1, #1
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff faa1 	bl	80008a0 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fa9c 	bl	80008a0 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e272      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d1f1      	bne.n	8001364 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2208      	movs	r2, #8
 8001386:	4013      	ands	r3, r2
 8001388:	d036      	beq.n	80013f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d019      	beq.n	80013c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fa7f 	bl	80008a0 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fa7a 	bl	80008a0 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e250      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f1      	beq.n	80013a8 <HAL_RCC_OscConfig+0x24c>
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80013c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	438a      	bics	r2, r1
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fa65 	bl	80008a0 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fa60 	bl	80008a0 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e236      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f1      	bne.n	80013dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2204      	movs	r2, #4
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_RCC_OscConfig+0x2a8>
 8001402:	e0b5      	b.n	8001570 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001404:	201f      	movs	r0, #31
 8001406:	183b      	adds	r3, r7, r0
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	055b      	lsls	r3, r3, #21
 8001414:	4013      	ands	r3, r2
 8001416:	d110      	bne.n	800143a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	0549      	lsls	r1, r1, #21
 8001422:	430a      	orrs	r2, r1
 8001424:	61da      	str	r2, [r3, #28]
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001434:	183b      	adds	r3, r7, r0
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_RCC_OscConfig+0x344>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d11a      	bne.n	800147c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_RCC_OscConfig+0x344>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x344>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	0049      	lsls	r1, r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001454:	f7ff fa24 	bl	80008a0 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fa1f 	bl	80008a0 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1f5      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x344>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10f      	bne.n	80014a4 <HAL_RCC_OscConfig+0x348>
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_RCC_OscConfig+0x338>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	621a      	str	r2, [r3, #32]
 8001490:	e036      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	40021000 	.word	0x40021000
 8001498:	fffeffff 	.word	0xfffeffff
 800149c:	fffbffff 	.word	0xfffbffff
 80014a0:	40007000 	.word	0x40007000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x36a>
 80014ac:	4bca      	ldr	r3, [pc, #808]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	4bc9      	ldr	r3, [pc, #804]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	438a      	bics	r2, r1
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	4bc7      	ldr	r3, [pc, #796]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ba:	6a1a      	ldr	r2, [r3, #32]
 80014bc:	4bc6      	ldr	r3, [pc, #792]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014be:	2104      	movs	r1, #4
 80014c0:	438a      	bics	r2, r1
 80014c2:	621a      	str	r2, [r3, #32]
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x38c>
 80014ce:	4bc2      	ldr	r3, [pc, #776]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	4bc1      	ldr	r3, [pc, #772]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	4bbf      	ldr	r3, [pc, #764]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	4bbe      	ldr	r3, [pc, #760]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	621a      	str	r2, [r3, #32]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x3a4>
 80014e8:	4bbb      	ldr	r3, [pc, #748]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4bba      	ldr	r3, [pc, #744]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	4bb8      	ldr	r3, [pc, #736]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4bb7      	ldr	r3, [pc, #732]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff f9ca 	bl	80008a0 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff f9c5 	bl	80008a0 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4aaf      	ldr	r2, [pc, #700]	; (80017dc <HAL_RCC_OscConfig+0x680>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e19a      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4bac      	ldr	r3, [pc, #688]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x3b6>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f9b5 	bl	80008a0 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff f9b0 	bl	80008a0 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4aa5      	ldr	r2, [pc, #660]	; (80017dc <HAL_RCC_OscConfig+0x680>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e185      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4ba1      	ldr	r3, [pc, #644]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b9c      	ldr	r3, [pc, #624]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4b9b      	ldr	r3, [pc, #620]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800156a:	499d      	ldr	r1, [pc, #628]	; (80017e0 <HAL_RCC_OscConfig+0x684>)
 800156c:	400a      	ands	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2210      	movs	r2, #16
 8001576:	4013      	ands	r3, r2
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12a      	bne.n	80015d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001582:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800158e:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff f981 	bl	80008a0 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015a4:	f7ff f97c 	bl	80008a0 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e152      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c0:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	22f8      	movs	r2, #248	; 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	e034      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	3305      	adds	r3, #5
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b7c      	ldr	r3, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	438a      	bics	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015ec:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	22f8      	movs	r2, #248	; 0xf8
 80015f2:	4393      	bics	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e01e      	b.n	8001642 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001604:	4b74      	ldr	r3, [pc, #464]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001608:	4b73      	ldr	r3, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800160a:	2104      	movs	r1, #4
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001610:	4b71      	ldr	r3, [pc, #452]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001614:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2101      	movs	r1, #1
 8001618:	438a      	bics	r2, r1
 800161a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f940 	bl	80008a0 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001626:	f7ff f93b 	bl	80008a0 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e111      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001638:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d1f1      	bne.n	8001626 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2220      	movs	r2, #32
 8001648:	4013      	ands	r3, r2
 800164a:	d05c      	beq.n	8001706 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800164c:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	220c      	movs	r2, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d00e      	beq.n	8001676 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001658:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	220c      	movs	r2, #12
 800165e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001660:	2b08      	cmp	r3, #8
 8001662:	d114      	bne.n	800168e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001664:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	23c0      	movs	r3, #192	; 0xc0
 800166a:	025b      	lsls	r3, r3, #9
 800166c:	401a      	ands	r2, r3
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	429a      	cmp	r2, r3
 8001674:	d10b      	bne.n	800168e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001676:	4b58      	ldr	r3, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	025b      	lsls	r3, r3, #9
 800167e:	4013      	ands	r3, r2
 8001680:	d040      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a8>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d03c      	beq.n	8001704 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0e6      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01b      	beq.n	80016ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001696:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169a:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0249      	lsls	r1, r1, #9
 80016a0:	430a      	orrs	r2, r1
 80016a2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f8fc 	bl	80008a0 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ae:	f7ff f8f7 	bl	80008a0 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0cd      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x552>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80016ce:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016d4:	4943      	ldr	r1, [pc, #268]	; (80017e4 <HAL_RCC_OscConfig+0x688>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f8e1 	bl	80008a0 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e4:	f7ff f8dc 	bl	80008a0 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0b2      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x588>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001704:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x5b4>
 800170e:	e0a4      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	220c      	movs	r2, #12
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x5c2>
 800171c:	e078      	b.n	8001810 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2b02      	cmp	r3, #2
 8001724:	d14c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800172c:	492e      	ldr	r1, [pc, #184]	; (80017e8 <HAL_RCC_OscConfig+0x68c>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f8b5 	bl	80008a0 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff f8b0 	bl	80008a0 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e086      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	220f      	movs	r2, #15
 8001760:	4393      	bics	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_RCC_OscConfig+0x690>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	431a      	orrs	r2, r3
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0449      	lsls	r1, r1, #17
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff f883 	bl	80008a0 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f87e 	bl	80008a0 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e054      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	049b      	lsls	r3, r3, #18
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x644>
 80017be:	e04c      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <HAL_RCC_OscConfig+0x68c>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff f868 	bl	80008a0 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x6a6>
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	40021000 	.word	0x40021000
 80017dc:	00001388 	.word	0x00001388
 80017e0:	efffffff 	.word	0xefffffff
 80017e4:	fffeffff 	.word	0xfffeffff
 80017e8:	feffffff 	.word	0xfeffffff
 80017ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f856 	bl	80008a0 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e02c      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_OscConfig+0x708>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	049b      	lsls	r3, r3, #18
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x694>
 800180e:	e024      	b.n	800185a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e01f      	b.n	800185c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x708>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_OscConfig+0x708>)
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	23c0      	movs	r3, #192	; 0xc0
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	429a      	cmp	r2, r3
 8001836:	d10e      	bne.n	8001856 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	220f      	movs	r2, #15
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	23f0      	movs	r3, #240	; 0xf0
 800184a:	039b      	lsls	r3, r3, #14
 800184c:	401a      	ands	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b008      	add	sp, #32
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0bf      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d911      	bls.n	80018ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2201      	movs	r2, #1
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0a6      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d015      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2204      	movs	r2, #4
 80018be:	4013      	ands	r3, r2
 80018c0:	d006      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018c8:	21e0      	movs	r1, #224	; 0xe0
 80018ca:	00c9      	lsls	r1, r1, #3
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	22f0      	movs	r2, #240	; 0xf0
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d04c      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d120      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07a      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	049b      	lsls	r3, r3, #18
 8001916:	4013      	ands	r3, r2
 8001918:	d114      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e06e      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	025b      	lsls	r3, r3, #9
 800192e:	4013      	ands	r3, r2
 8001930:	d108      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e062      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e05b      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2203      	movs	r2, #3
 800194a:	4393      	bics	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7fe ffa2 	bl	80008a0 <HAL_GetTick>
 800195c:	0003      	movs	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001960:	e009      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001962:	f7fe ff9d 	bl	80008a0 <HAL_GetTick>
 8001966:	0002      	movs	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_RCC_ClockConfig+0x1a4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e042      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	220c      	movs	r2, #12
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ec      	bne.n	8001962 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d211      	bcs.n	80019ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x19c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e020      	b.n	80019fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_RCC_ClockConfig+0x1a8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019d8:	f000 f820 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1ac>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1b0>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7fe ff0d 	bl	8000814 <HAL_InitTick>
  
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	fffff8ff 	.word	0xfffff8ff
 8001a14:	08002e78 	.word	0x08002e78
 8001a18:	20000010 	.word	0x20000010

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b08f      	sub	sp, #60	; 0x3c
 8001a20:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a22:	2314      	movs	r3, #20
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xec>)
 8001a28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a2a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001a34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a36:	c313      	stmia	r3!, {r0, r1, r4}
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	d047      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0xd4>
 8001a60:	d849      	bhi.n	8001af6 <HAL_RCC_GetSysClockFreq+0xda>
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x50>
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x56>
 8001a6a:	e044      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a70:	e044      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	220f      	movs	r2, #15
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2214      	movs	r2, #20
 8001a7c:	18ba      	adds	r2, r7, r2
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	220f      	movs	r2, #15
 8001a88:	4013      	ands	r3, r2
 8001a8a:	1d3a      	adds	r2, r7, #4
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	401a      	ands	r2, r3
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aa2:	481c      	ldr	r0, [pc, #112]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa4:	f7fe fb2e 	bl	8000104 <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	001a      	movs	r2, r3
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	4353      	muls	r3, r2
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab2:	e01a      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	23c0      	movs	r3, #192	; 0xc0
 8001ab8:	025b      	lsls	r3, r3, #9
 8001aba:	401a      	ands	r2, r3
 8001abc:	23c0      	movs	r3, #192	; 0xc0
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ac6:	4814      	ldr	r0, [pc, #80]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ac8:	f7fe fb1c 	bl	8000104 <__udivsi3>
 8001acc:	0003      	movs	r3, r0
 8001ace:	001a      	movs	r2, r3
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	4353      	muls	r3, r2
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ada:	480e      	ldr	r0, [pc, #56]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001adc:	f7fe fb12 	bl	8000104 <__udivsi3>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	4353      	muls	r3, r2
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aee:	e005      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af4:	e002      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001afa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b00f      	add	sp, #60	; 0x3c
 8001b04:	bd90      	pop	{r4, r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	08002e58 	.word	0x08002e58
 8001b0c:	08002e68 	.word	0x08002e68
 8001b10:	40021000 	.word	0x40021000
 8001b14:	007a1200 	.word	0x007a1200
 8001b18:	02dc6c00 	.word	0x02dc6c00

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	20000010 	.word	0x20000010

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b34:	f7ff fff2 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	2207      	movs	r2, #7
 8001b42:	4013      	ands	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	40d9      	lsrs	r1, r3
 8001b4a:	000b      	movs	r3, r1
}    
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	40021000 	.word	0x40021000
 8001b58:	08002e88 	.word	0x08002e88

08001b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	025b      	lsls	r3, r3, #9
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b78:	e08e      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2017      	movs	r0, #23
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b84:	69da      	ldr	r2, [r3, #28]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d110      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0549      	lsls	r1, r1, #21
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	61da      	str	r2, [r3, #28]
 8001b9c:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	055b      	lsls	r3, r3, #21
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	183b      	adds	r3, r7, r0
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d11a      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bbc:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	0049      	lsls	r1, r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fe69 	bl	80008a0 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd2:	e008      	b.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd4:	f7fe fe64 	bl	80008a0 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0a6      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bf2:	4b52      	ldr	r3, [pc, #328]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	23c0      	movs	r3, #192	; 0xc0
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d034      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d02c      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c14:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c20:	6a1a      	ldr	r2, [r3, #32]
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	0249      	lsls	r1, r1, #9
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	6a1a      	ldr	r2, [r3, #32]
 8001c30:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c32:	4945      	ldr	r1, [pc, #276]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe fe2b 	bl	80008a0 <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4e:	e009      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7fe fe26 	bl	80008a0 <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e067      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c82:	2317      	movs	r3, #23
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c92:	492f      	ldr	r1, [pc, #188]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4a23      	ldr	r2, [pc, #140]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	02db      	lsls	r3, r3, #11
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	2210      	movs	r2, #16
 8001d04:	4393      	bics	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	4393      	bics	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b006      	add	sp, #24
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	fffffcff 	.word	0xfffffcff
 8001d48:	fffeffff 	.word	0xfffeffff
 8001d4c:	00001388 	.word	0x00001388
 8001d50:	efffffff 	.word	0xefffffff
 8001d54:	fffcffff 	.word	0xfffcffff
 8001d58:	fff3ffff 	.word	0xfff3ffff

08001d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e044      	b.n	8001df8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2274      	movs	r2, #116	; 0x74
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7fe fbf3 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2224      	movs	r2, #36	; 0x24
 8001d8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	438a      	bics	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f000 fbce 	bl	8002540 <UART_SetConfig>
 8001da4:	0003      	movs	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e024      	b.n	8001df8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 fda9 	bl	8002910 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	490d      	ldr	r1, [pc, #52]	; (8001e00 <HAL_UART_Init+0xa4>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	212a      	movs	r1, #42	; 0x2a
 8001dda:	438a      	bics	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 fe41 	bl	8002a78 <UART_CheckIdleState>
 8001df6:	0003      	movs	r3, r0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	ffffb7ff 	.word	0xffffb7ff

08001e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	1dbb      	adds	r3, r7, #6
 8001e12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d000      	beq.n	8001e1e <HAL_UART_Transmit+0x1a>
 8001e1c:	e096      	b.n	8001f4c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_UART_Transmit+0x28>
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e08e      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d109      	bne.n	8001e50 <HAL_UART_Transmit+0x4c>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e07e      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2274      	movs	r2, #116	; 0x74
 8001e54:	5c9b      	ldrb	r3, [r3, r2]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Transmit+0x5a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e077      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2274      	movs	r2, #116	; 0x74
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	; 0x21
 8001e72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e74:	f7fe fd14 	bl	80008a0 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1dba      	adds	r2, r7, #6
 8001e80:	2150      	movs	r1, #80	; 0x50
 8001e82:	8812      	ldrh	r2, [r2, #0]
 8001e84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1dba      	adds	r2, r7, #6
 8001e8a:	2152      	movs	r1, #82	; 0x52
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d108      	bne.n	8001eae <HAL_UART_Transmit+0xaa>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	e003      	b.n	8001eb6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2274      	movs	r2, #116	; 0x74
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001ebe:	e02d      	b.n	8001f1c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	0013      	movs	r3, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	f000 fe1b 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e039      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	05d2      	lsls	r2, r2, #23
 8001eea:	0dd2      	lsrs	r2, r2, #23
 8001eec:	b292      	uxth	r2, r2
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e008      	b.n	8001f0a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b292      	uxth	r2, r2
 8001f02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2252      	movs	r2, #82	; 0x52
 8001f0e:	5a9b      	ldrh	r3, [r3, r2]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b299      	uxth	r1, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2252      	movs	r2, #82	; 0x52
 8001f1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2252      	movs	r2, #82	; 0x52
 8001f20:	5a9b      	ldrh	r3, [r3, r2]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1cb      	bne.n	8001ec0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	0013      	movs	r3, r2
 8001f32:	2200      	movs	r2, #0
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	f000 fde7 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e005      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b008      	add	sp, #32
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b0ab      	sub	sp, #172	; 0xac
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	22a4      	movs	r2, #164	; 0xa4
 8001f68:	18b9      	adds	r1, r7, r2
 8001f6a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	20a0      	movs	r0, #160	; 0xa0
 8001f74:	1839      	adds	r1, r7, r0
 8001f76:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	219c      	movs	r1, #156	; 0x9c
 8001f80:	1879      	adds	r1, r7, r1
 8001f82:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f84:	0011      	movs	r1, r2
 8001f86:	18bb      	adds	r3, r7, r2
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a99      	ldr	r2, [pc, #612]	; (80021f0 <HAL_UART_IRQHandler+0x298>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2298      	movs	r2, #152	; 0x98
 8001f90:	18bc      	adds	r4, r7, r2
 8001f92:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001f94:	18bb      	adds	r3, r7, r2
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d114      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00f      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	4013      	ands	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <HAL_UART_IRQHandler+0x62>
 8001fb8:	e296      	b.n	80024e8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	4798      	blx	r3
      }
      return;
 8001fc4:	e290      	b.n	80024e8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001fc6:	2398      	movs	r3, #152	; 0x98
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d100      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x7a>
 8001fd0:	e114      	b.n	80021fc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001fd2:	239c      	movs	r3, #156	; 0x9c
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d106      	bne.n	8001fec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001fde:	23a0      	movs	r3, #160	; 0xa0
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a83      	ldr	r2, [pc, #524]	; (80021f4 <HAL_UART_IRQHandler+0x29c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_UART_IRQHandler+0x94>
 8001fea:	e107      	b.n	80021fc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001fec:	23a4      	movs	r3, #164	; 0xa4
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d012      	beq.n	800201e <HAL_UART_IRQHandler+0xc6>
 8001ff8:	23a0      	movs	r3, #160	; 0xa0
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d00b      	beq.n	800201e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2201      	movs	r2, #1
 800200c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	589b      	ldr	r3, [r3, r2]
 8002014:	2201      	movs	r2, #1
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800201e:	23a4      	movs	r3, #164	; 0xa4
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2202      	movs	r2, #2
 8002026:	4013      	ands	r3, r2
 8002028:	d011      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
 800202a:	239c      	movs	r3, #156	; 0x9c
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d00b      	beq.n	800204e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	589b      	ldr	r3, [r3, r2]
 8002044:	2204      	movs	r2, #4
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800204e:	23a4      	movs	r3, #164	; 0xa4
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d011      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
 800205a:	239c      	movs	r3, #156	; 0x9c
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d00b      	beq.n	800207e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	589b      	ldr	r3, [r3, r2]
 8002074:	2202      	movs	r2, #2
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800207e:	23a4      	movs	r3, #164	; 0xa4
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2208      	movs	r2, #8
 8002086:	4013      	ands	r3, r2
 8002088:	d017      	beq.n	80020ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800208a:	23a0      	movs	r3, #160	; 0xa0
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2220      	movs	r2, #32
 8002092:	4013      	ands	r3, r2
 8002094:	d105      	bne.n	80020a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002096:	239c      	movs	r3, #156	; 0x9c
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020a0:	d00b      	beq.n	80020ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2208      	movs	r2, #8
 80020a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	589b      	ldr	r3, [r3, r2]
 80020b0:	2208      	movs	r2, #8
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2180      	movs	r1, #128	; 0x80
 80020b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80020ba:	23a4      	movs	r3, #164	; 0xa4
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4013      	ands	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_UART_IRQHandler+0x198>
 80020c8:	23a0      	movs	r3, #160	; 0xa0
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	04db      	lsls	r3, r3, #19
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00c      	beq.n	80020f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	589b      	ldr	r3, [r3, r2]
 80020e6:	2220      	movs	r2, #32
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	589b      	ldr	r3, [r3, r2]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_UART_IRQHandler+0x1a4>
 80020fa:	e1f7      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020fc:	23a4      	movs	r3, #164	; 0xa4
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002108:	23a0      	movs	r3, #160	; 0xa0
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	4013      	ands	r3, r2
 8002112:	d008      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	0010      	movs	r0, r2
 8002124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	589b      	ldr	r3, [r3, r2]
 800212c:	2194      	movs	r1, #148	; 0x94
 800212e:	187a      	adds	r2, r7, r1
 8002130:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	4013      	ands	r3, r2
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d004      	beq.n	800214a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002140:	187b      	adds	r3, r7, r1
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2228      	movs	r2, #40	; 0x28
 8002146:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002148:	d047      	beq.n	80021da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fd9f 	bl	8002c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	4013      	ands	r3, r2
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d137      	bne.n	80021d0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002160:	f3ef 8310 	mrs	r3, PRIMASK
 8002164:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002168:	2090      	movs	r0, #144	; 0x90
 800216a:	183a      	adds	r2, r7, r0
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002174:	f383 8810 	msr	PRIMASK, r3
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2140      	movs	r1, #64	; 0x40
 8002186:	438a      	bics	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	183b      	adds	r3, r7, r0
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_UART_IRQHandler+0x2a0>)
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7fe fd03 	bl	8000bb8 <HAL_DMA_Abort_IT>
 80021b2:	1e03      	subs	r3, r0, #0
 80021b4:	d01a      	beq.n	80021ec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	0018      	movs	r0, r3
 80021c2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	e012      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f9a5 	bl	8002518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ce:	e00d      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f9a0 	bl	8002518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e008      	b.n	80021ec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f99b 	bl	8002518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	2100      	movs	r1, #0
 80021e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021ea:	e17f      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	46c0      	nop			; (mov r8, r8)
    return;
 80021ee:	e17d      	b.n	80024ec <HAL_UART_IRQHandler+0x594>
 80021f0:	0000080f 	.word	0x0000080f
 80021f4:	04000120 	.word	0x04000120
 80021f8:	08002d55 	.word	0x08002d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002200:	2b01      	cmp	r3, #1
 8002202:	d000      	beq.n	8002206 <HAL_UART_IRQHandler+0x2ae>
 8002204:	e131      	b.n	800246a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002206:	23a4      	movs	r3, #164	; 0xa4
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2210      	movs	r2, #16
 800220e:	4013      	ands	r3, r2
 8002210:	d100      	bne.n	8002214 <HAL_UART_IRQHandler+0x2bc>
 8002212:	e12a      	b.n	800246a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002214:	23a0      	movs	r3, #160	; 0xa0
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2210      	movs	r2, #16
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_UART_IRQHandler+0x2ca>
 8002220:	e123      	b.n	800246a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2210      	movs	r2, #16
 8002228:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d000      	beq.n	800223a <HAL_UART_IRQHandler+0x2e2>
 8002238:	e09b      	b.n	8002372 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	217e      	movs	r1, #126	; 0x7e
 8002244:	187b      	adds	r3, r7, r1
 8002246:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002248:	187b      	adds	r3, r7, r1
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x2fa>
 8002250:	e14e      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2258      	movs	r2, #88	; 0x58
 8002256:	5a9b      	ldrh	r3, [r3, r2]
 8002258:	187a      	adds	r2, r7, r1
 800225a:	8812      	ldrh	r2, [r2, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d300      	bcc.n	8002262 <HAL_UART_IRQHandler+0x30a>
 8002260:	e146      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	187a      	adds	r2, r7, r1
 8002266:	215a      	movs	r1, #90	; 0x5a
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b20      	cmp	r3, #32
 8002274:	d06e      	beq.n	8002354 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002276:	f3ef 8310 	mrs	r3, PRIMASK
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800227e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002280:	2301      	movs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002286:	f383 8810 	msr	PRIMASK, r3
}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	499a      	ldr	r1, [pc, #616]	; (8002500 <HAL_UART_IRQHandler+0x5a8>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a8:	f3ef 8310 	mrs	r3, PRIMASK
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80022ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74
 80022b2:	2301      	movs	r3, #1
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b8:	f383 8810 	msr	PRIMASK, r3
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	438a      	bics	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d4:	f383 8810 	msr	PRIMASK, r3
}
 80022d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022da:	f3ef 8310 	mrs	r3, PRIMASK
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022e2:	673b      	str	r3, [r7, #112]	; 0x70
 80022e4:	2301      	movs	r3, #1
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	438a      	bics	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002302:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002306:	f383 8810 	msr	PRIMASK, r3
}
 800230a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002318:	f3ef 8310 	mrs	r3, PRIMASK
 800231c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800231e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002320:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002322:	2301      	movs	r3, #1
 8002324:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2110      	movs	r1, #16
 800233a:	438a      	bics	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002344:	f383 8810 	msr	PRIMASK, r3
}
 8002348:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	0018      	movs	r0, r3
 8002350:	f7fe fbfa 	bl	8000b48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2258      	movs	r2, #88	; 0x58
 8002358:	5a9a      	ldrh	r2, [r3, r2]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	215a      	movs	r1, #90	; 0x5a
 800235e:	5a5b      	ldrh	r3, [r3, r1]
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f000 f8dc 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002370:	e0be      	b.n	80024f0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2258      	movs	r2, #88	; 0x58
 8002376:	5a99      	ldrh	r1, [r3, r2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	225a      	movs	r2, #90	; 0x5a
 800237c:	5a9b      	ldrh	r3, [r3, r2]
 800237e:	b29a      	uxth	r2, r3
 8002380:	208e      	movs	r0, #142	; 0x8e
 8002382:	183b      	adds	r3, r7, r0
 8002384:	1a8a      	subs	r2, r1, r2
 8002386:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	225a      	movs	r2, #90	; 0x5a
 800238c:	5a9b      	ldrh	r3, [r3, r2]
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <HAL_UART_IRQHandler+0x43e>
 8002394:	e0ae      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002396:	183b      	adds	r3, r7, r0
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d100      	bne.n	80023a0 <HAL_UART_IRQHandler+0x448>
 800239e:	e0a9      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a0:	f3ef 8310 	mrs	r3, PRIMASK
 80023a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80023a6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a8:	2488      	movs	r4, #136	; 0x88
 80023aa:	193a      	adds	r2, r7, r4
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f383 8810 	msr	PRIMASK, r3
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	494f      	ldr	r1, [pc, #316]	; (8002504 <HAL_UART_IRQHandler+0x5ac>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f383 8810 	msr	PRIMASK, r3
}
 80023d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80023de:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e0:	2484      	movs	r4, #132	; 0x84
 80023e2:	193a      	adds	r2, r7, r4
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	438a      	bics	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	193b      	adds	r3, r7, r4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f383 8810 	msr	PRIMASK, r3
}
 800240e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002422:	f3ef 8310 	mrs	r3, PRIMASK
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800242a:	2480      	movs	r4, #128	; 0x80
 800242c:	193a      	adds	r2, r7, r4
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	f383 8810 	msr	PRIMASK, r3
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2110      	movs	r1, #16
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	193b      	adds	r3, r7, r4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800245a:	183b      	adds	r3, r7, r0
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0011      	movs	r1, r2
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f860 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002468:	e044      	b.n	80024f4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800246a:	23a4      	movs	r3, #164	; 0xa4
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	035b      	lsls	r3, r3, #13
 8002474:	4013      	ands	r3, r2
 8002476:	d010      	beq.n	800249a <HAL_UART_IRQHandler+0x542>
 8002478:	239c      	movs	r3, #156	; 0x9c
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	03db      	lsls	r3, r3, #15
 8002482:	4013      	ands	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0352      	lsls	r2, r2, #13
 800248e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fca0 	bl	8002dd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002498:	e02f      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800249a:	23a4      	movs	r3, #164	; 0xa4
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00f      	beq.n	80024c6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80024a6:	23a0      	movs	r3, #160	; 0xa0
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	4013      	ands	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01e      	beq.n	80024f8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	0010      	movs	r0, r2
 80024c2:	4798      	blx	r3
    }
    return;
 80024c4:	e018      	b.n	80024f8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024c6:	23a4      	movs	r3, #164	; 0xa4
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_UART_IRQHandler+0x5a2>
 80024d2:	23a0      	movs	r3, #160	; 0xa0
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	4013      	ands	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fc4e 	bl	8002d82 <UART_EndTransmit_IT>
    return;
 80024e6:	e008      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	e006      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	e004      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	e002      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
      return;
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	e000      	b.n	80024fa <HAL_UART_IRQHandler+0x5a2>
    return;
 80024f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b02b      	add	sp, #172	; 0xac
 80024fe:	bd90      	pop	{r4, r7, pc}
 8002500:	fffffeff 	.word	0xfffffeff
 8002504:	fffffedf 	.word	0xfffffedf

08002508 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b002      	add	sp, #8
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	000a      	movs	r2, r1
 8002532:	1cbb      	adds	r3, r7, #2
 8002534:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002548:	231e      	movs	r3, #30
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4abe      	ldr	r2, [pc, #760]	; (8002868 <UART_SetConfig+0x328>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4ab9      	ldr	r2, [pc, #740]	; (800286c <UART_SetConfig+0x32c>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4ab0      	ldr	r2, [pc, #704]	; (8002870 <UART_SetConfig+0x330>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4aac      	ldr	r2, [pc, #688]	; (8002874 <UART_SetConfig+0x334>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d127      	bne.n	8002616 <UART_SetConfig+0xd6>
 80025c6:	4bac      	ldr	r3, [pc, #688]	; (8002878 <UART_SetConfig+0x338>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	2203      	movs	r2, #3
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d00d      	beq.n	80025ee <UART_SetConfig+0xae>
 80025d2:	d81b      	bhi.n	800260c <UART_SetConfig+0xcc>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d014      	beq.n	8002602 <UART_SetConfig+0xc2>
 80025d8:	d818      	bhi.n	800260c <UART_SetConfig+0xcc>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <UART_SetConfig+0xa4>
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d00a      	beq.n	80025f8 <UART_SetConfig+0xb8>
 80025e2:	e013      	b.n	800260c <UART_SetConfig+0xcc>
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	e0bd      	b.n	800276a <UART_SetConfig+0x22a>
 80025ee:	231f      	movs	r3, #31
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e0b8      	b.n	800276a <UART_SetConfig+0x22a>
 80025f8:	231f      	movs	r3, #31
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2204      	movs	r2, #4
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e0b3      	b.n	800276a <UART_SetConfig+0x22a>
 8002602:	231f      	movs	r3, #31
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2208      	movs	r2, #8
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e0ae      	b.n	800276a <UART_SetConfig+0x22a>
 800260c:	231f      	movs	r3, #31
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2210      	movs	r2, #16
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	e0a9      	b.n	800276a <UART_SetConfig+0x22a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a98      	ldr	r2, [pc, #608]	; (800287c <UART_SetConfig+0x33c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d134      	bne.n	800268a <UART_SetConfig+0x14a>
 8002620:	4b95      	ldr	r3, [pc, #596]	; (8002878 <UART_SetConfig+0x338>)
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	22c0      	movs	r2, #192	; 0xc0
 800262c:	0292      	lsls	r2, r2, #10
 800262e:	4293      	cmp	r3, r2
 8002630:	d017      	beq.n	8002662 <UART_SetConfig+0x122>
 8002632:	22c0      	movs	r2, #192	; 0xc0
 8002634:	0292      	lsls	r2, r2, #10
 8002636:	4293      	cmp	r3, r2
 8002638:	d822      	bhi.n	8002680 <UART_SetConfig+0x140>
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	0292      	lsls	r2, r2, #10
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <UART_SetConfig+0x136>
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	0292      	lsls	r2, r2, #10
 8002646:	4293      	cmp	r3, r2
 8002648:	d81a      	bhi.n	8002680 <UART_SetConfig+0x140>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <UART_SetConfig+0x118>
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	0252      	lsls	r2, r2, #9
 8002652:	4293      	cmp	r3, r2
 8002654:	d00a      	beq.n	800266c <UART_SetConfig+0x12c>
 8002656:	e013      	b.n	8002680 <UART_SetConfig+0x140>
 8002658:	231f      	movs	r3, #31
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e083      	b.n	800276a <UART_SetConfig+0x22a>
 8002662:	231f      	movs	r3, #31
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e07e      	b.n	800276a <UART_SetConfig+0x22a>
 800266c:	231f      	movs	r3, #31
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	e079      	b.n	800276a <UART_SetConfig+0x22a>
 8002676:	231f      	movs	r3, #31
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2208      	movs	r2, #8
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e074      	b.n	800276a <UART_SetConfig+0x22a>
 8002680:	231f      	movs	r3, #31
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2210      	movs	r2, #16
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e06f      	b.n	800276a <UART_SetConfig+0x22a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7c      	ldr	r2, [pc, #496]	; (8002880 <UART_SetConfig+0x340>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d134      	bne.n	80026fe <UART_SetConfig+0x1be>
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <UART_SetConfig+0x338>)
 8002696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002698:	23c0      	movs	r3, #192	; 0xc0
 800269a:	031b      	lsls	r3, r3, #12
 800269c:	4013      	ands	r3, r2
 800269e:	22c0      	movs	r2, #192	; 0xc0
 80026a0:	0312      	lsls	r2, r2, #12
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d017      	beq.n	80026d6 <UART_SetConfig+0x196>
 80026a6:	22c0      	movs	r2, #192	; 0xc0
 80026a8:	0312      	lsls	r2, r2, #12
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d822      	bhi.n	80026f4 <UART_SetConfig+0x1b4>
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	0312      	lsls	r2, r2, #12
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <UART_SetConfig+0x1aa>
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	0312      	lsls	r2, r2, #12
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d81a      	bhi.n	80026f4 <UART_SetConfig+0x1b4>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <UART_SetConfig+0x18c>
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	02d2      	lsls	r2, r2, #11
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00a      	beq.n	80026e0 <UART_SetConfig+0x1a0>
 80026ca:	e013      	b.n	80026f4 <UART_SetConfig+0x1b4>
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e049      	b.n	800276a <UART_SetConfig+0x22a>
 80026d6:	231f      	movs	r3, #31
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2202      	movs	r2, #2
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e044      	b.n	800276a <UART_SetConfig+0x22a>
 80026e0:	231f      	movs	r3, #31
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2204      	movs	r2, #4
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e03f      	b.n	800276a <UART_SetConfig+0x22a>
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2208      	movs	r2, #8
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e03a      	b.n	800276a <UART_SetConfig+0x22a>
 80026f4:	231f      	movs	r3, #31
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2210      	movs	r2, #16
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e035      	b.n	800276a <UART_SetConfig+0x22a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a60      	ldr	r2, [pc, #384]	; (8002884 <UART_SetConfig+0x344>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d104      	bne.n	8002712 <UART_SetConfig+0x1d2>
 8002708:	231f      	movs	r3, #31
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e02b      	b.n	800276a <UART_SetConfig+0x22a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5c      	ldr	r2, [pc, #368]	; (8002888 <UART_SetConfig+0x348>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d104      	bne.n	8002726 <UART_SetConfig+0x1e6>
 800271c:	231f      	movs	r3, #31
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e021      	b.n	800276a <UART_SetConfig+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a58      	ldr	r2, [pc, #352]	; (800288c <UART_SetConfig+0x34c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d104      	bne.n	800273a <UART_SetConfig+0x1fa>
 8002730:	231f      	movs	r3, #31
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e017      	b.n	800276a <UART_SetConfig+0x22a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a54      	ldr	r2, [pc, #336]	; (8002890 <UART_SetConfig+0x350>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d104      	bne.n	800274e <UART_SetConfig+0x20e>
 8002744:	231f      	movs	r3, #31
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e00d      	b.n	800276a <UART_SetConfig+0x22a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a50      	ldr	r2, [pc, #320]	; (8002894 <UART_SetConfig+0x354>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d104      	bne.n	8002762 <UART_SetConfig+0x222>
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e003      	b.n	800276a <UART_SetConfig+0x22a>
 8002762:	231f      	movs	r3, #31
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2210      	movs	r2, #16
 8002768:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	429a      	cmp	r2, r3
 8002774:	d15d      	bne.n	8002832 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002776:	231f      	movs	r3, #31
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d015      	beq.n	80027ac <UART_SetConfig+0x26c>
 8002780:	dc18      	bgt.n	80027b4 <UART_SetConfig+0x274>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d00d      	beq.n	80027a2 <UART_SetConfig+0x262>
 8002786:	dc15      	bgt.n	80027b4 <UART_SetConfig+0x274>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <UART_SetConfig+0x252>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d005      	beq.n	800279c <UART_SetConfig+0x25c>
 8002790:	e010      	b.n	80027b4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7ff f9cd 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002796:	0003      	movs	r3, r0
 8002798:	61bb      	str	r3, [r7, #24]
        break;
 800279a:	e012      	b.n	80027c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <UART_SetConfig+0x358>)
 800279e:	61bb      	str	r3, [r7, #24]
        break;
 80027a0:	e00f      	b.n	80027c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a2:	f7ff f93b 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80027a6:	0003      	movs	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]
        break;
 80027aa:	e00a      	b.n	80027c2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	61bb      	str	r3, [r7, #24]
        break;
 80027b2:	e006      	b.n	80027c2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027b8:	231e      	movs	r3, #30
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
        break;
 80027c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d100      	bne.n	80027ca <UART_SetConfig+0x28a>
 80027c8:	e095      	b.n	80028f6 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	005a      	lsls	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	18d2      	adds	r2, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0019      	movs	r1, r3
 80027dc:	0010      	movs	r0, r2
 80027de:	f7fd fc91 	bl	8000104 <__udivsi3>
 80027e2:	0003      	movs	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	d91c      	bls.n	8002828 <UART_SetConfig+0x2e8>
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d217      	bcs.n	8002828 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	200e      	movs	r0, #14
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	210f      	movs	r1, #15
 8002802:	438a      	bics	r2, r1
 8002804:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	b299      	uxth	r1, r3
 8002812:	183b      	adds	r3, r7, r0
 8002814:	183a      	adds	r2, r7, r0
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	183a      	adds	r2, r7, r0
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e066      	b.n	80028f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002828:	231e      	movs	r3, #30
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e061      	b.n	80028f6 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002832:	231f      	movs	r3, #31
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d02f      	beq.n	800289c <UART_SetConfig+0x35c>
 800283c:	dc32      	bgt.n	80028a4 <UART_SetConfig+0x364>
 800283e:	2b04      	cmp	r3, #4
 8002840:	d00d      	beq.n	800285e <UART_SetConfig+0x31e>
 8002842:	dc2f      	bgt.n	80028a4 <UART_SetConfig+0x364>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <UART_SetConfig+0x30e>
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <UART_SetConfig+0x318>
 800284c:	e02a      	b.n	80028a4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284e:	f7ff f96f 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8002852:	0003      	movs	r3, r0
 8002854:	61bb      	str	r3, [r7, #24]
        break;
 8002856:	e02c      	b.n	80028b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <UART_SetConfig+0x358>)
 800285a:	61bb      	str	r3, [r7, #24]
        break;
 800285c:	e029      	b.n	80028b2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285e:	f7ff f8dd 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002862:	0003      	movs	r3, r0
 8002864:	61bb      	str	r3, [r7, #24]
        break;
 8002866:	e024      	b.n	80028b2 <UART_SetConfig+0x372>
 8002868:	efff69f3 	.word	0xefff69f3
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	fffff4ff 	.word	0xfffff4ff
 8002874:	40013800 	.word	0x40013800
 8002878:	40021000 	.word	0x40021000
 800287c:	40004400 	.word	0x40004400
 8002880:	40004800 	.word	0x40004800
 8002884:	40004c00 	.word	0x40004c00
 8002888:	40005000 	.word	0x40005000
 800288c:	40011400 	.word	0x40011400
 8002890:	40011800 	.word	0x40011800
 8002894:	40011c00 	.word	0x40011c00
 8002898:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	61bb      	str	r3, [r7, #24]
        break;
 80028a2:	e006      	b.n	80028b2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028a8:	231e      	movs	r3, #30
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
        break;
 80028b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01e      	beq.n	80028f6 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	085a      	lsrs	r2, r3, #1
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	18d2      	adds	r2, r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0019      	movs	r1, r3
 80028c8:	0010      	movs	r0, r2
 80028ca:	f7fd fc1b 	bl	8000104 <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d909      	bls.n	80028ee <UART_SetConfig+0x3ae>
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	025b      	lsls	r3, r3, #9
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d204      	bcs.n	80028ee <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e003      	b.n	80028f6 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80028ee:	231e      	movs	r3, #30
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002902:	231e      	movs	r3, #30
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b008      	add	sp, #32
 800290e:	bd80      	pop	{r7, pc}

08002910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d00b      	beq.n	800293a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <UART_AdvFeatureConfig+0x144>)
 800292a:	4013      	ands	r3, r2
 800292c:	0019      	movs	r1, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d00b      	beq.n	800295c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <UART_AdvFeatureConfig+0x148>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d00b      	beq.n	800297e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <UART_AdvFeatureConfig+0x14c>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	d00b      	beq.n	80029a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a34      	ldr	r2, [pc, #208]	; (8002a60 <UART_AdvFeatureConfig+0x150>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2210      	movs	r2, #16
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <UART_AdvFeatureConfig+0x154>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <UART_AdvFeatureConfig+0x158>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2240      	movs	r2, #64	; 0x40
 80029ea:	4013      	ands	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <UART_AdvFeatureConfig+0x15c>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	035b      	lsls	r3, r3, #13
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d10b      	bne.n	8002a2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <UART_AdvFeatureConfig+0x160>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	4013      	ands	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <UART_AdvFeatureConfig+0x164>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	fffdffff 	.word	0xfffdffff
 8002a58:	fffeffff 	.word	0xfffeffff
 8002a5c:	fffbffff 	.word	0xfffbffff
 8002a60:	ffff7fff 	.word	0xffff7fff
 8002a64:	ffffefff 	.word	0xffffefff
 8002a68:	ffffdfff 	.word	0xffffdfff
 8002a6c:	ffefffff 	.word	0xffefffff
 8002a70:	ff9fffff 	.word	0xff9fffff
 8002a74:	fff7ffff 	.word	0xfff7ffff

08002a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	2100      	movs	r1, #0
 8002a86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a88:	f7fd ff0a 	bl	80008a0 <HAL_GetTick>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2208      	movs	r2, #8
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d10c      	bne.n	8002ab8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	0391      	lsls	r1, r2, #14
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <UART_CheckIdleState+0x8c>)
 8002aa8:	9200      	str	r2, [sp, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f000 f82c 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e021      	b.n	8002afc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d10c      	bne.n	8002ae0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	03d1      	lsls	r1, r2, #15
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <UART_CheckIdleState+0x8c>)
 8002ad0:	9200      	str	r2, [sp, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f000 f818 	bl	8002b08 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e00d      	b.n	8002afc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2274      	movs	r2, #116	; 0x74
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b004      	add	sp, #16
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	01ffffff 	.word	0x01ffffff

08002b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b094      	sub	sp, #80	; 0x50
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	e0a3      	b.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	d100      	bne.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b20:	e09f      	b.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fd febd 	bl	80008a0 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13d      	bne.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b38:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
 8002b42:	2301      	movs	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	494c      	ldr	r1, [pc, #304]	; (8002c8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
 8002b74:	2301      	movs	r3, #1
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2274      	movs	r2, #116	; 0x74
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e067      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d050      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	401a      	ands	r2, r3
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d146      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	613b      	str	r3, [r7, #16]
  return(result);
 8002be4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	2301      	movs	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4923      	ldr	r1, [pc, #140]	; (8002c8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f383 8810 	msr	PRIMASK, r3
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c10:	f3ef 8310 	mrs	r3, PRIMASK
 8002c14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c16:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f383 8810 	msr	PRIMASK, r3
}
 8002c40:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2274      	movs	r2, #116	; 0x74
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e010      	b.n	8002c84 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	425a      	negs	r2, r3
 8002c72:	4153      	adcs	r3, r2
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	001a      	movs	r2, r3
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d100      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002c80:	e74b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b014      	add	sp, #80	; 0x50
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fffffe5f 	.word	0xfffffe5f

08002c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08e      	sub	sp, #56	; 0x38
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c98:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4925      	ldr	r1, [pc, #148]	; (8002d50 <UART_EndRxTransfer+0xc0>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cca:	f3ef 8310 	mrs	r3, PRIMASK
 8002cce:	623b      	str	r3, [r7, #32]
  return(result);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	438a      	bics	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d118      	bne.n	8002d36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d04:	f3ef 8310 	mrs	r3, PRIMASK
 8002d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0e:	2301      	movs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2110      	movs	r1, #16
 8002d26:	438a      	bics	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b00e      	add	sp, #56	; 0x38
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	fffffedf 	.word	0xfffffedf

08002d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	225a      	movs	r2, #90	; 0x5a
 8002d66:	2100      	movs	r1, #0
 8002d68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2252      	movs	r2, #82	; 0x52
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fbcf 	bl	8002518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	2301      	movs	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff fb9c 	bl	8002508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b006      	add	sp, #24
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <__libc_init_array>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	2600      	movs	r6, #0
 8002dec:	4d0c      	ldr	r5, [pc, #48]	; (8002e20 <__libc_init_array+0x38>)
 8002dee:	4c0d      	ldr	r4, [pc, #52]	; (8002e24 <__libc_init_array+0x3c>)
 8002df0:	1b64      	subs	r4, r4, r5
 8002df2:	10a4      	asrs	r4, r4, #2
 8002df4:	42a6      	cmp	r6, r4
 8002df6:	d109      	bne.n	8002e0c <__libc_init_array+0x24>
 8002df8:	2600      	movs	r6, #0
 8002dfa:	f000 f821 	bl	8002e40 <_init>
 8002dfe:	4d0a      	ldr	r5, [pc, #40]	; (8002e28 <__libc_init_array+0x40>)
 8002e00:	4c0a      	ldr	r4, [pc, #40]	; (8002e2c <__libc_init_array+0x44>)
 8002e02:	1b64      	subs	r4, r4, r5
 8002e04:	10a4      	asrs	r4, r4, #2
 8002e06:	42a6      	cmp	r6, r4
 8002e08:	d105      	bne.n	8002e16 <__libc_init_array+0x2e>
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	00b3      	lsls	r3, r6, #2
 8002e0e:	58eb      	ldr	r3, [r5, r3]
 8002e10:	4798      	blx	r3
 8002e12:	3601      	adds	r6, #1
 8002e14:	e7ee      	b.n	8002df4 <__libc_init_array+0xc>
 8002e16:	00b3      	lsls	r3, r6, #2
 8002e18:	58eb      	ldr	r3, [r5, r3]
 8002e1a:	4798      	blx	r3
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	e7f2      	b.n	8002e06 <__libc_init_array+0x1e>
 8002e20:	08002e90 	.word	0x08002e90
 8002e24:	08002e90 	.word	0x08002e90
 8002e28:	08002e90 	.word	0x08002e90
 8002e2c:	08002e94 	.word	0x08002e94

08002e30 <memset>:
 8002e30:	0003      	movs	r3, r0
 8002e32:	1882      	adds	r2, r0, r2
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <memset+0xa>
 8002e38:	4770      	bx	lr
 8002e3a:	7019      	strb	r1, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e7f9      	b.n	8002e34 <memset+0x4>

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
